var S=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});import"dotenv/config";import B from"express";import O from"path";import{fileURLToPath as ge}from"url";import{createServer as ue}from"http";import le from"express-fileupload";import{createClient as ie}from"@supabase/supabase-js";var M=process.env.SUPABASE_URL,V=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!M||!V)throw new Error("Supabase URL and service role key must be provided");var m=ie(M,V),d={async generateRegistrationNumber(){try{let{count:r,error:t}=await m.from("event_registrations").select("*",{count:"exact",head:!0});if(t)throw console.error("Error getting registration count:",t),t;return((r||0)+1).toString().padStart(4,"0")}catch(r){throw console.error("Error generating registration number:",r),r}},async getUser(r){try{let{data:t,error:e}=await m.from("users").select("id, first_name, last_name, phone_number, created_at").eq("id",r).single();if(e||!t){console.error("Error fetching user from users table:",e?.message);return}let{data:s,error:n}=await m.auth.admin.getUserById(r);if(n||!s.user){console.error("Error fetching auth user:",n?.message);return}return{id:t.id,email:s.user.email||"",firstName:t.first_name,lastName:t.last_name,phoneNumber:t.phone_number,role:s.user.user_metadata?.role||"ordinary_user",createdAt:t.created_at}}catch(t){console.error("Error in getUser:",t.message);return}},async getUserByEmail(r){try{let{data:t,error:e}=await m.auth.admin.listUsers();if(e){console.error("Error fetching auth users:",e.message);return}let s=t.users.find(o=>o.email===r);if(!s)return;let{data:n,error:a}=await m.from("users").select("id, first_name, last_name, phone_number, created_at").eq("id",s.id).single();if(a||!n){console.error("Error fetching user by email from users table:",a?.message);return}return{id:n.id,email:s.email||"",firstName:n.first_name,lastName:n.last_name,phoneNumber:n.phone_number,role:s.user_metadata?.role||"ordinary_user",createdAt:n.created_at}}catch(t){console.error("Error in getUserByEmail:",t.message);return}},async createUser(r){try{let{data:t,error:e}=await m.auth.admin.createUser({email:r.email,password:r.password,user_metadata:{role:r.role||"ordinary_user",first_name:r.firstName,last_name:r.lastName,phone_number:r.phoneNumber}});if(e)throw console.error("Error creating auth user:",e.message),new Error(`Failed to create auth user: ${e.message}`);let{data:s,error:n}=await m.from("users").insert({id:t.user.id,first_name:r.firstName,last_name:r.lastName,phone_number:r.phoneNumber}).select("id, first_name, last_name, phone_number, created_at").single();if(n)throw console.error("Error creating user in users table:",n.message),new Error(`Failed to create user: ${n.message}`);return{id:s.id,email:r.email,firstName:s.first_name,lastName:s.last_name,phoneNumber:s.phone_number,role:r.role||"ordinary_user",createdAt:s.created_at}}catch(t){throw console.error("Error in createUser:",t.message),new Error(`Failed to create user: ${t.message}`)}},async getAllUsers(){try{let{data:r,error:t}=await m.from("users").select("id, first_name, last_name, phone_number, created_at");if(t)throw console.error("Error fetching all users:",t.message),new Error(`Failed to fetch users: ${t.message}`);return(await Promise.all(r.map(async s=>{let{data:n,error:a}=await m.auth.admin.getUserById(s.id);if(a){console.error(`Error fetching auth user ${s.id}:`,a.message);return}return{id:s.id,email:n.user.email||"",firstName:s.first_name,lastName:s.last_name,phoneNumber:s.phone_number,role:n.user.user_metadata?.role||"ordinary_user",createdAt:s.created_at?new Date(s.created_at):null}}))).filter(s=>s!==void 0)}catch(r){throw console.error("Error in getAllUsers:",r.message),new Error(`Failed to fetch users: ${r.message}`)}},async getEvent(r){try{let{data:t,error:e}=await m.from("events").select("*").eq("id",r).single();if(e){console.error("Error fetching event:",e.message);return}return{id:t.id,title:t.title,description:t.description,startDate:t.start_date,endDate:t.end_date,location:t.location,price:t.price,maxAttendees:t.max_attendees,currentAttendees:t.current_attendees,imageUrl:t.image_url,tags:t.tags,featured:t.featured,createdAt:t.created_at}}catch(t){console.error("Error in getEvent:",t.message);return}},async getAllEvents(){try{let{data:r,error:t}=await m.from("events").select("*").order("start_date");if(t)throw console.error("Error fetching all events:",t.message),new Error(`Failed to fetch events: ${t.message}`);return r.map(e=>({id:e.id,title:e.title,description:e.description,startDate:e.start_date,endDate:e.end_date,location:e.location,price:e.price,maxAttendees:e.max_attendees,currentAttendees:e.current_attendees,imageUrl:e.image_url,tags:e.tags,featured:e.featured,createdAt:e.created_at}))}catch(r){throw console.error("Error in getAllEvents:",r.message),new Error(`Failed to fetch events: ${r.message}`)}},async createEvent(r){try{let{data:t,error:e}=await m.from("events").insert({title:r.title,description:r.description,start_date:r.startDate,end_date:r.endDate,location:r.location,price:r.price,max_attendees:r.maxAttendees,image_url:r.imageUrl,tags:r.tags,featured:r.featured}).select().single();if(e)throw console.error("Error creating event:",e.message),new Error(`Failed to create event: ${e.message}`);return{id:t.id,title:t.title,description:t.description,startDate:t.start_date,endDate:t.end_date,location:t.location,price:t.price,maxAttendees:t.max_attendees,currentAttendees:t.current_attendees,imageUrl:t.image_url,tags:t.tags,featured:t.featured,createdAt:t.created_at}}catch(t){throw console.error("Error in createEvent:",t.message),new Error(`Failed to create event: ${t.message}`)}},async updateEvent(r,t){try{let{data:e,error:s}=await m.from("events").update({title:t.title,description:t.description,start_date:t.startDate,end_date:t.endDate,location:t.location,price:t.price,max_attendees:t.maxAttendees,current_attendees:t.currentAttendees,image_url:t.imageUrl,tags:t.tags,featured:t.featured}).eq("id",r).select().single();if(s){console.error("Error updating event:",s.message);return}return{id:e.id,title:e.title,description:e.description,startDate:e.start_date,endDate:e.end_date,location:e.location,price:e.price,maxAttendees:e.max_attendees,currentAttendees:e.current_attendees,imageUrl:e.image_url,tags:e.tags,featured:e.featured,createdAt:e.created_at}}catch(e){console.error("Error in updateEvent:",e.message);return}},async deleteEvent(r){try{let{error:t}=await m.from("events").delete().eq("id",r);return t?(console.error("Error deleting event:",t.message),!1):!0}catch(t){return console.error("Error in deleteEvent:",t.message),!1}},async getEventRegistration(r){try{let{data:t,error:e}=await m.from("event_registrations").select("*").eq("id",r).single();if(e){console.error("Error fetching event registration:",e.message);return}return{id:t.id,registrationNumber:t.registration_number,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registeredAt:t.registered_at}}catch(t){console.error("Error in getEventRegistration:",t.message);return}},async getEventRegistrationsByUser(r){try{let{data:t,error:e}=await m.from("event_registrations").select("*").eq("user_id",r);if(e)throw console.error("Error fetching user registrations:",e.message),new Error(`Failed to fetch registrations: ${e.message}`);return t.map(s=>({id:s.id,registrationNumber:s.registration_number,eventId:s.event_id,userId:s.user_id,paymentStatus:s.payment_status,title:s.title,gender:s.gender,country:s.country,organization:s.organization,organizationType:s.organization_type,position:s.position,notes:s.notes,hasPaid:s.has_paid,paymentEvidence:s.payment_evidence,registeredAt:s.registered_at}))}catch(t){throw console.error("Error in getEventRegistrationsByUser:",t.message),new Error(`Failed to fetch registrations: ${t.message}`)}},async getEventRegistrationsByEvent(r){try{let{data:t,error:e}=await m.from("event_registrations").select("*").eq("event_id",r);if(e)throw console.error("Error fetching event registrations:",e.message),new Error(`Failed to fetch registrations: ${e.message}`);return t.map(s=>({id:s.id,registrationNumber:s.registration_number,eventId:s.event_id,userId:s.user_id,paymentStatus:s.payment_status,title:s.title,gender:s.gender,country:s.country,organization:s.organization,organizationType:s.organization_type,position:s.position,notes:s.notes,hasPaid:s.has_paid,paymentEvidence:s.payment_evidence,registeredAt:s.registered_at}))}catch(t){throw console.error("Error in getEventRegistrationsByEvent:",t.message),new Error(`Failed to fetch registrations: ${t.message}`)}},async getAllEventRegistrations(){try{let{data:r,error:t}=await m.from("event_registrations").select("*");if(t)throw console.error("Error fetching all registrations:",t.message),new Error(`Failed to fetch registrations: ${t.message}`);return r.map(e=>({id:e.id,registrationNumber:e.registration_number,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registeredAt:e.registered_at}))}catch(r){throw console.error("Error in getAllEventRegistrations:",r.message),new Error(`Failed to fetch registrations: ${r.message}`)}},async createEventRegistration(r){try{let t=await this.generateRegistrationNumber(),{data:e,error:s}=await m.from("event_registrations").insert({registration_number:t,event_id:r.eventId,user_id:r.userId,payment_status:r.paymentStatus||"pending",title:r.title,gender:r.gender,country:r.country,organization:r.organization,organization_type:r.organizationType,position:r.position,notes:r.notes,has_paid:r.hasPaid||!1,payment_evidence:r.paymentEvidence}).select().single();if(s)throw console.error("Error creating event registration:",s.message),new Error(`Failed to create registration: ${s.message}`);return await m.rpc("increment_attendees",{event_id:r.eventId}).then(({error:n})=>{n&&console.error("Error incrementing attendees:",n.message)}),{id:e.id,registrationNumber:e.registration_number,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registeredAt:e.registered_at}}catch(t){throw console.error("Error in createEventRegistration:",t.message),new Error(`Failed to create registration: ${t.message}`)}},async updateEventRegistration(r,t){try{let{data:e,error:s}=await m.from("event_registrations").update({payment_status:t.paymentStatus,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organization_type:t.organizationType,position:t.position,notes:t.notes,has_paid:t.hasPaid,payment_evidence:t.paymentEvidence}).eq("id",r).select().single();if(s){console.error("Error updating event registration:",s.message);return}return{id:e.id,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registrationNumber:e.registration_number,registeredAt:e.registered_at}}catch(e){console.error("Error in updateEventRegistration:",e.message);return}},async cancelEventRegistration(r){try{let{data:t,error:e}=await m.from("event_registrations").select("event_id").eq("id",r).single();if(e)throw console.error("Error fetching registration for cancellation:",e.message),new Error(`Failed to fetch registration: ${e.message}`);let{error:s}=await m.from("event_registrations").update({payment_status:"cancelled",has_paid:!1}).eq("id",r);if(s)throw console.error("Error cancelling event registration:",s.message),new Error(`Failed to cancel registration: ${s.message}`);await m.rpc("decrement_attendees",{event_id:t.event_id}).then(({error:n})=>{n&&console.error("Error decrementing attendees:",n.message)})}catch(t){throw console.error("Error in cancelEventRegistration:",t.message),new Error(`Failed to cancel registration: ${t.message}`)}},async deleteEventRegistration(r){try{let{data:t,error:e}=await m.from("event_registrations").select("event_id, payment_evidence").eq("id",r).single();if(e)throw console.error("Error fetching registration for deletion:",e.message),new Error(`Failed to fetch registration: ${e.message}`);if(t.payment_evidence){let{error:n}=await m.storage.from("registrations").remove([t.payment_evidence]);if(n)throw console.error("Error deleting payment evidence:",n.message),new Error(`Failed to delete payment evidence: ${n.message}`)}let{error:s}=await m.from("event_registrations").delete().eq("id",r);if(s)throw console.error("Error deleting event registration:",s.message),new Error(`Failed to delete registration: ${s.message}`);await m.rpc("decrement_attendees",{event_id:t.event_id}).then(({error:n})=>{n&&console.error("Error decrementing attendees:",n.message)})}catch(t){throw console.error("Error in deleteEventRegistration:",t.message),new Error(`Failed to delete registration: ${t.message}`)}},async createNewsletterSubscription(r){try{let{data:t,error:e}=await m.from("newsletter_subscriptions").insert({email:r.email,name:r.name}).select().single();if(e)throw console.error("Error creating newsletter subscription:",e.message),new Error(`Failed to create subscription: ${e.message}`);return{id:t.id,email:t.email,name:t.name,subscribedAt:t.subscribed_at}}catch(t){throw console.error("Error in createNewsletterSubscription:",t.message),new Error(`Failed to create subscription: ${t.message}`)}},async getNewsletterSubscriptionByEmail(r){try{let{data:t,error:e}=await m.from("newsletter_subscriptions").select("*").eq("email",r).single();if(e){console.error("Error fetching newsletter subscription:",e.message);return}return{id:t.id,email:t.email,name:t.name,subscribedAt:t.subscribed_at}}catch(t){console.error("Error in getNewsletterSubscriptionByEmail:",t.message);return}},async getAllNewsletterSubscriptions(){try{let{data:r,error:t}=await m.from("newsletter_subscriptions").select("*");if(t)throw console.error("Error fetching all newsletter subscriptions:",t.message),new Error(`Failed to fetch subscriptions: ${t.message}`);return r.map(e=>({id:e.id,email:e.email,name:e.name,subscribedAt:e.subscribed_at}))}catch(r){throw console.error("Error in getAllNewsletterSubscriptions:",r.message),new Error(`Failed to fetch subscriptions: ${r.message}`)}}};import{sql as P}from"drizzle-orm";import{pgTable as D,text as v,varchar as U,timestamp as I,boolean as W,decimal as oe,integer as K}from"drizzle-orm/pg-core";import{createInsertSchema as Y}from"drizzle-zod";import{z as f}from"zod";var G=D("users",{id:U("id").primaryKey().default(P`gen_random_uuid()`),email:v("email").notNull().unique(),password:v("password").notNull(),firstName:v("first_name").notNull(),lastName:v("last_name").notNull(),phoneNumber:v("phone_number"),role:v("role").notNull().default("admin"),createdAt:I("created_at").defaultNow()}),H=D("events",{id:U("id").primaryKey().default(P`gen_random_uuid()`),title:v("title").notNull(),description:v("description").notNull(),startDate:I("start_date").notNull(),endDate:I("end_date").notNull(),location:v("location"),price:oe("price",{precision:10,scale:2}).notNull(),maxAttendees:K("max_attendees"),currentAttendees:K("current_attendees").default(0),imageUrl:v("image_url"),tags:v("tags").array(),featured:W("featured").default(!1),createdAt:I("created_at").defaultNow()}),Re=D("event_registrations",{id:U("id").primaryKey().default(P`gen_random_uuid()`),registrationNumber:v("registration_number").notNull().unique(),userId:U("user_id").notNull().references(()=>G.id),eventId:U("event_id").notNull().references(()=>H.id),paymentStatus:v("payment_status").notNull().default("pending"),registeredAt:I("registered_at").defaultNow(),title:v("title"),gender:v("gender"),country:v("country"),organization:v("organization"),organizationType:v("organization_type"),position:v("position"),notes:v("notes"),hasPaid:W("has_paid").default(!1),paymentEvidence:v("payment_evidence")}),Se=D("newsletter_subscriptions",{id:U("id").primaryKey().default(P`gen_random_uuid()`),email:v("email").notNull().unique(),name:v("name"),subscribedAt:I("subscribed_at").defaultNow()}),J=Y(G).omit({id:!0,createdAt:!0}),X=Y(H).omit({id:!0,createdAt:!0,currentAttendees:!0}),$=f.object({eventId:f.string(),userId:f.string(),title:f.string(),gender:f.string(),country:f.string(),organization:f.string(),organizationType:f.string(),position:f.string(),notes:f.string().optional().nullable(),hasPaid:f.boolean().optional().default(!1),paymentStatus:f.enum(["pending","paid","cancelled"]).optional().default("pending"),paymentMethod:f.string().optional().nullable(),currency:f.string().optional().nullable(),pricePaid:f.number().optional().nullable(),paymentEvidence:f.string().optional().nullable()}),q=f.object({email:f.string().email(),name:f.string().optional().nullable()}),Ae=f.object({id:f.string().uuid(),registrationId:f.string().uuid(),filePath:f.string(),uploadedAt:f.string().datetime()}),Ue=f.object({registrationId:f.string().uuid(),filePath:f.string()});import{createClient as N}from"@supabase/supabase-js";import{createClient as ce}from"@supabase/supabase-js";var E={SuperAdmin:"super_admin",Finance:"finance_person",EventManager:"event_manager",Ordinary:"ordinary_user"},Q=(r,t)=>!!r&&t.includes(r);var de=r=>Q(r,[E.SuperAdmin,E.Finance,E.EventManager]),y=async(r,t,e)=>{try{let s=r.headers.authorization,n=s?.startsWith("Bearer ")?s.slice(7):void 0;if(!n)return t.status(401).json({message:"Access token required"});let a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)return t.status(500).json({message:"Supabase server credentials not configured"});let i=ce(a,o),{data:c,error:u}=await i.auth.getUser(n);if(u||!c.user)return t.status(403).json({message:"Invalid or expired token"});r.supabaseUser=c.user,r.supabaseRole=c.user.user_metadata?.role||E.Ordinary,e()}catch{return t.status(403).json({message:"Invalid or expired token"})}},F=r=>(t,e,s)=>{let n=t.supabaseRole;if(!Q(n,r))return e.status(403).json({message:"Insufficient permissions"});s()},A=F([E.SuperAdmin]),L=F([E.SuperAdmin,E.Finance,E.EventManager]),z=F([E.SuperAdmin,E.Finance]),T=F([E.SuperAdmin,E.EventManager]),x=(r="userId")=>(t,e,s)=>{let n=t.params[r],a=t.supabaseUser?.id,o=t.supabaseRole;return n===a||de(o)?s():e.status(403).json({message:"Access denied. You can only access your own resources."})},l=(r,t,e,s)=>(console.error(`Error in ${s}:`,r),r.message?.includes("Invalid input")?e.status(400).json({message:"Invalid request data"}):r.message?.includes("not found")?e.status(404).json({message:"Resource not found"}):r.message?.includes("already exists")?e.status(409).json({message:"Resource already exists"}):e.status(500).json({message:process.env.NODE_ENV==="production"?"Internal server error":r.message}));function Z(r){r.post("/api/auth/register",async(t,e)=>{try{let s=J.parse(t.body);if(await d.getUserByEmail(s.email))return e.status(400).json({message:"User already exists"});let o=(await d.getAllUsers()).length===0,i=await d.createUser({...s,role:o?"super_admin":s.role||"ordinary_user"});e.status(201).json({user:i})}catch(s){l(s,t,e,"auth/register")}}),r.post("/api/auth/login",async(t,e)=>{try{let{email:s,password:n}=t.body;if(!s||!n)return e.status(400).json({message:"Email and password required"});let a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)return e.status(500).json({message:"Supabase server credentials not configured"});let i=N(a,o),{data:c,error:u}=await i.auth.signInWithPassword({email:s,password:n});if(u||!c.user)return e.status(401).json({message:"Invalid credentials"});let g=await d.getUser(c.user.id);if(!g)return e.status(404).json({message:"User not found"});e.json({user:g,token:c.session.access_token})}catch(s){l(s,t,e,"auth/login")}}),r.post("/api/auth/logout",y,async(t,e)=>{try{e.json({message:"Logged out successfully"})}catch(s){l(s,t,e,"auth/logout")}}),r.get("/api/auth/me",y,async(t,e)=>{try{let s=await d.getUser(t.supabaseUser.id);if(!s)return e.status(404).json({message:"User not found"});e.json({user:s})}catch(s){l(s,t,e,"auth/me")}}),r.post("/api/auth/refresh",async(t,e)=>{try{let{refresh_token:s}=t.body;if(!s)return e.status(400).json({message:"Refresh token required"});let n=process.env.SUPABASE_URL,a=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!n||!a)return e.status(500).json({message:"Supabase server credentials not configured"});let o=N(n,a),{data:i,error:c}=await o.auth.refreshSession({refresh_token:s});if(c||!i.session)return e.status(401).json({message:"Invalid refresh token"});e.json({token:i.session.access_token,refresh_token:i.session.refresh_token,expires_at:i.session.expires_at})}catch(s){l(s,t,e,"auth/refresh")}}),r.post("/api/auth/forgot-password",async(t,e)=>{try{let{email:s}=t.body;if(!s)return e.status(400).json({message:"Email required"});let n=process.env.SUPABASE_URL,a=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!n||!a)return e.status(500).json({message:"Supabase server credentials not configured"});let o=N(n,a),{error:i}=await o.auth.resetPasswordForEmail(s,{redirectTo:`${process.env.FRONTEND_URL}/reset-password`});if(i)return console.error("Password reset error:",i),e.status(500).json({message:"Failed to send reset email"});e.json({message:"Password reset email sent if account exists"})}catch(s){l(s,t,e,"auth/forgot-password")}}),r.post("/api/auth/reset-password",async(t,e)=>{try{let{token:s,password:n}=t.body;if(!s||!n)return e.status(400).json({message:"Token and password required"});let a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)return e.status(500).json({message:"Supabase server credentials not configured"});let i=N(a,o),{data:c,error:u}=await i.auth.updateUser({password:n});if(u)return console.error("Password update error:",u),e.status(400).json({message:"Invalid or expired token"});e.json({message:"Password updated successfully"})}catch(s){l(s,t,e,"auth/reset-password")}}),r.patch("/api/auth/change-password",y,async(t,e)=>{try{let{currentPassword:s,newPassword:n}=t.body;if(!s||!n)return e.status(400).json({message:"Current and new password required"});let a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)return e.status(500).json({message:"Supabase server credentials not configured"});let i=N(a,o),{error:c}=await i.auth.signInWithPassword({email:t.supabaseUser.email,password:s});if(c)return e.status(400).json({message:"Current password is incorrect"});let{error:u}=await i.auth.admin.updateUserById(t.supabaseUser.id,{password:n});if(u)return console.error("Password update error:",u),e.status(500).json({message:"Failed to update password"});e.json({message:"Password changed successfully"})}catch(s){l(s,t,e,"auth/change-password")}})}import{createClient as ee}from"@supabase/supabase-js";function te(r){r.post("/api/admin/users/register",y,A,async(t,e)=>{try{let{firstName:s,lastName:n,email:a,phoneNumber:o,password:i,role:c}=t.body;if(!s||!n||!a||!i||!c)return e.status(400).json({message:"Missing required fields"});if(await d.getUserByEmail(a))return e.status(400).json({message:"User already exists"});let g=process.env.SUPABASE_URL,w=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!g||!w)return e.status(500).json({message:"Server configuration error"});let h=ee(g,w),{data:p,error:_}=await h.auth.admin.createUser({email:a,password:i,email_confirm:!0,user_metadata:{first_name:s,last_name:n,phone_number:o,role:c}});if(_)return console.error("Supabase auth error:",_),e.status(500).json({message:"Failed to create user account"});if(!p.user)return e.status(500).json({message:"Failed to create user"});let R=await d.createUser({firstName:s,lastName:n,email:a,password:i,phoneNumber:o||null,role:c});console.log(`\u2705 Admin created user: ${a} with role: ${c}`),e.status(201).json({message:"User created successfully",user:{id:R.id,firstName:R.firstName,lastName:R.lastName,email:R.email,phoneNumber:R.phoneNumber,role:R.role,createdAt:R.createdAt}})}catch(s){l(s,t,e,"admin/users/register")}}),r.get("/api/admin/users",y,A,async(t,e)=>{try{let s=await d.getAllUsers(),n=await Promise.all(s.map(async o=>{try{let i=await d.getEventRegistrationsByUser(o.id);return{...o,totalRegistrations:i.length,activeRegistrations:i.filter(c=>c.paymentStatus!=="cancelled").length,paidRegistrations:i.filter(c=>c.hasPaid===!0).length}}catch(i){return console.error(`Error getting stats for user ${o.id}:`,i),{...o,totalRegistrations:0,activeRegistrations:0,paidRegistrations:0}}})),a=n.reduce((o,i)=>(o[i.role]=(o[i.role]||0)+1,o),{});e.json({users:n,stats:{totalUsers:n.length,roleDistribution:a}})}catch(s){l(s,t,e,"admin/users")}}),r.patch("/api/admin/users/:userId/role",y,A,async(t,e)=>{try{let{userId:s}=t.params,{role:n}=t.body;if(!n||!Object.values(E).includes(n))return e.status(400).json({message:"Invalid role specified"});if(t.supabaseUser.id===s&&n!==E.SuperAdmin)return e.status(400).json({message:"Cannot change your own super admin role"});let a=await d.getUser(s);if(!a)return e.status(404).json({message:"User not found"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return e.status(500).json({message:"Server configuration error"});let c=ee(o,i),{error:u}=await c.auth.admin.updateUserById(s,{user_metadata:{role:n}});if(u)throw console.error("Error updating user role:",u),u;console.log(`\u2705 Role updated: ${a.email} -> ${n}`),e.json({message:"User role updated successfully",user:{...a,role:n}})}catch(s){l(s,t,e,"admin/users/role")}}),r.get("/api/admin/events",y,L,async(t,e)=>{try{let s=await d.getAllEvents(),n=await Promise.all(s.map(async a=>{try{let o=await d.getEventRegistrationsByEvent(a.id),i=o.filter(c=>c.paymentStatus!=="cancelled");return{...a,totalRegistrations:o.length,activeRegistrations:i.length,paidRegistrations:i.filter(c=>c.hasPaid).length,pendingPayments:i.filter(c=>!c.hasPaid).length,revenue:i.filter(c=>c.hasPaid).reduce((c,u)=>c+(parseFloat(a.price)||0),0)}}catch(o){return console.error(`Error getting stats for event ${a.id}:`,o),{...a,totalRegistrations:0,activeRegistrations:0,paidRegistrations:0,pendingPayments:0,revenue:0}}}));e.json(n)}catch(s){l(s,t,e,"admin/events")}}),r.get("/api/admin/registrations",y,L,async(t,e)=>{try{let{status:s,eventId:n,userId:a,page:o=1,limit:i=50}=t.query,c=await d.getAllEventRegistrations();s&&(c=c.filter(p=>p.paymentStatus===s)),n&&(c=c.filter(p=>p.eventId===n)),a&&(c=c.filter(p=>p.userId===a)),c.sort((p,_)=>new Date(_.registeredAt||0).getTime()-new Date(p.registeredAt||0).getTime());let u=(Number(o)-1)*Number(i),g=u+Number(i),w=c.slice(u,g),h={total:c.length,pending:c.filter(p=>p.paymentStatus==="pending").length,confirmed:c.filter(p=>p.paymentStatus==="confirmed").length,cancelled:c.filter(p=>p.paymentStatus==="cancelled").length,totalRevenue:c.filter(p=>p.hasPaid).reduce((p,_)=>p+0,0)};e.json({registrations:w,stats:h,pagination:{page:Number(o),limit:Number(i),total:c.length,pages:Math.ceil(c.length/Number(i))}})}catch(s){l(s,t,e,"admin/registrations")}}),r.post("/api/admin/events/register",y,T,async(t,e)=>{try{let s=$.parse(t.body);if((await d.getEventRegistrationsByUser(s.userId)).some(c=>c.eventId===s.eventId&&c.paymentStatus!=="cancelled"))return e.status(400).json({message:"User already registered for this event"});if(!await d.getEvent(s.eventId))return e.status(404).json({message:"Event not found"});let i=await d.createEventRegistration({...s,paymentStatus:s.paymentStatus||"pending",hasPaid:s.hasPaid||!1});console.log(`\u2705 Admin registered user ${s.userId} for event ${s.eventId}`),e.status(201).json(i)}catch(s){l(s,t,e,"admin/events/register")}}),r.patch("/api/admin/registrations/:registrationId",y,z,async(t,e)=>{try{let{registrationId:s}=t.params,n=t.body;if(!await d.getEventRegistration(s))return e.status(404).json({message:"Registration not found"});let o=await d.updateEventRegistration(s,n);console.log(`\u2705 Finance updated registration ${s}:`,n),e.json(o)}catch(s){l(s,t,e,"admin/registrations/update")}}),r.post("/api/admin/events",y,T,async(t,e)=>{try{let s=X.parse(t.body),n=await d.createEvent(s);console.log(`\u2705 Event created: ${n.title} by ${t.supabaseUser.email}`),e.status(201).json(n)}catch(s){l(s,t,e,"admin/events/create")}}),r.patch("/api/admin/events/:eventId",y,T,async(t,e)=>{try{let{eventId:s}=t.params,n=t.body;if(!await d.getEvent(s))return e.status(404).json({message:"Event not found"});let o=await d.updateEvent(s,n);console.log(`\u2705 Event updated: ${s} by ${t.supabaseUser.email}`),e.json(o)}catch(s){l(s,t,e,"admin/events/update")}}),r.delete("/api/admin/events/:eventId",y,A,async(t,e)=>{try{let{eventId:s}=t.params;if(!await d.getEvent(s))return e.status(404).json({message:"Event not found"});let o=(await d.getEventRegistrationsByEvent(s)).filter(i=>i.paymentStatus!=="cancelled");if(o.length>0)return e.status(400).json({message:"Cannot delete event with active registrations",activeRegistrations:o.length});await d.deleteEvent(s),console.log(`\u2705 Event deleted: ${s} by ${t.supabaseUser.email}`),e.json({message:"Event deleted successfully"})}catch(s){l(s,t,e,"admin/events/delete")}}),r.get("/api/admin/newsletter-subscriptions",y,A,async(t,e)=>{try{let s=await d.getAllNewsletterSubscriptions(),n={total:s.length,recentSubscriptions:s.filter(a=>{let o=new Date;return o.setMonth(o.getMonth()-1),new Date(a.subscribedAt||0)>o}).length};e.json({subscriptions:s,stats:n})}catch(s){l(s,t,e,"admin/newsletter-subscriptions")}}),r.post("/api/admin/email-blast",y,A,async(t,e)=>{try{let{subject:s,content:n,recipients:a}=t.body;if(!s||!n)return e.status(400).json({message:"Subject and content required"});console.log(`\u{1F4E7} Email blast requested by ${t.supabaseUser.email}:`,{subject:s,recipientCount:a?.length||"all subscribers"}),e.json({message:"Email blast functionality not yet implemented",details:{subject:s,recipientCount:a?.length||"all subscribers",status:"pending_implementation"}})}catch(s){l(s,t,e,"admin/email-blast")}}),r.get("/api/admin/payment-evidence/:evidencePath",y,z,async(t,e)=>{try{let{evidencePath:s}=t.params,n=s.split("/");if(n.length!==3)return e.status(400).json({message:"Invalid evidence path format"});let[a,o,i]=n,u=(await d.getEventRegistrationsByUser(a)).find(p=>p.eventId===o);if(!u)return e.status(404).json({message:"Registration not found"});if(u.paymentEvidence!==s)return e.status(404).json({message:"Evidence file not found"});let g=`./attached_assets/${s}`;if(!S("fs").existsSync(g))return e.status(404).json({message:"Evidence file not found on disk"});let h=i.endsWith(".pdf")?"application/pdf":i.endsWith(".jpg")||i.endsWith(".jpeg")?"image/jpeg":i.endsWith(".png")?"image/png":"application/octet-stream";e.setHeader("Content-Type",h),e.setHeader("Content-Disposition",`inline; filename="${i}"`),e.sendFile(S("path").resolve(g))}catch(s){l(s,t,e,"admin/payment-evidence")}}),r.put("/api/admin/payment-evidence/:registrationId",y,z,async(t,e)=>{try{let{registrationId:s}=t.params;if(!t.files||!t.files.evidenceFile)return e.status(400).json({message:"No evidence file provided"});let n=Array.isArray(t.files.evidenceFile)?t.files.evidenceFile[0]:t.files.evidenceFile,a=await d.getEventRegistration(s);if(!a)return e.status(404).json({message:"Registration not found"});if(!["image/jpeg","image/png","application/pdf"].includes(n.mimetype))return e.status(400).json({message:"Invalid file type. Only JPEG, PNG, and PDF files are allowed."});let i=10*1024*1024;if(n.size>i)return e.status(400).json({message:"File too large. Maximum size is 10MB."});let c=S("fs"),u=S("path"),g=`./attached_assets/${a.userId}/${a.eventId}`;c.existsSync(g)||c.mkdirSync(g,{recursive:!0});let w=u.extname(n.name),h=`payment_evidence_${Date.now()}${w}`,p=u.join(g,h),_=`${a.userId}/${a.eventId}/${h}`;if(a.paymentEvidence){let j=`./attached_assets/${a.paymentEvidence}`;c.existsSync(j)&&c.unlinkSync(j)}await n.mv(p);let R=await d.updateEventRegistration(s,{paymentEvidence:_});console.log(`\u2705 Admin updated payment evidence for registration ${s}`),e.json({message:"Payment evidence updated successfully",evidencePath:_,originalName:n.name})}catch(s){l(s,t,e,"admin/payment-evidence/update")}})}function se(r){r.post("/api/events/register",y,async(t,e)=>{try{let s=$.parse(t.body);if(s.userId!==t.supabaseUser.id)return e.status(403).json({message:"Can only register for yourself"});if((await d.getEventRegistrationsByUser(s.userId)).some(c=>c.eventId===s.eventId&&c.paymentStatus!=="cancelled"))return e.status(400).json({message:"Already registered for this event"});let o=await d.getEvent(s.eventId);if(!o)return e.status(404).json({message:"Event not found"});if(o.maxAttendees&&o.currentAttendees&&o.currentAttendees>=o.maxAttendees)return e.status(400).json({message:"Event is full"});let i=await d.createEventRegistration({...s,paymentStatus:"pending",hasPaid:!1});e.status(201).json(i)}catch(s){l(s,t,e,"events/register")}}),r.get("/api/users/:userId/registrations",y,x(),async(t,e)=>{try{let{userId:s}=t.params,n=await d.getEventRegistrationsByUser(s),a=["super_admin","finance_person","event_manager"].includes(t.supabaseRole),o=n.map(i=>{if(a)return i;let{...c}=i;return c});e.json(o)}catch(s){l(s,t,e,"users/registrations")}}),r.patch("/api/users/:userId/registrations/:registrationId/cancel",y,x(),async(t,e)=>{try{let{userId:s,registrationId:n}=t.params,a=await d.getEventRegistration(n);if(!a)return e.status(404).json({message:"Registration not found"});if(a.userId!==s)return e.status(403).json({message:"Access denied"});if(a.paymentStatus==="cancelled")return e.status(400).json({message:"Registration already cancelled"});let o=await d.cancelEventRegistration(n);console.log(`\u2705 User ${s} cancelled registration ${n}`),e.json({message:"Registration cancelled successfully",registration:o})}catch(s){l(s,t,e,"users/registrations/cancel")}}),r.delete("/api/users/:userId/registrations/:registrationId",y,x(),async(t,e)=>{try{let{userId:s,registrationId:n}=t.params;if(!["super_admin","finance_person","event_manager"].includes(t.supabaseRole))return e.status(403).json({message:"Only administrators can permanently delete registrations"});let o=await d.getEventRegistration(n);if(!o)return e.status(404).json({message:"Registration not found"});if(t.supabaseRole!=="super_admin"&&o.userId!==s)return e.status(403).json({message:"Access denied"});await d.deleteEventRegistration(n),console.log(`\u2705 Admin deleted registration ${n} for user ${s}`),e.json({message:"Registration deleted successfully"})}catch(s){l(s,t,e,"users/registrations/delete")}}),r.get("/api/users/payment-evidence/:evidencePath",y,async(t,e)=>{try{let{evidencePath:s}=t.params,n=s.split("/");if(n.length!==3)return e.status(400).json({message:"Invalid evidence path format"});let[a,o,i]=n;if(a!==t.supabaseUser.id)return e.status(403).json({message:"Access denied"});let u=(await d.getEventRegistrationsByUser(a)).find(p=>p.eventId===o);if(!u)return e.status(404).json({message:"Registration not found"});if(u.paymentEvidence!==s)return e.status(404).json({message:"Evidence file not found"});let g=`./attached_assets/${s}`;if(!S("fs").existsSync(g))return e.status(404).json({message:"Evidence file not found on disk"});let h=i.endsWith(".pdf")?"application/pdf":i.endsWith(".jpg")||i.endsWith(".jpeg")?"image/jpeg":i.endsWith(".png")?"image/png":"application/octet-stream";e.setHeader("Content-Type",h),e.setHeader("Content-Disposition",`inline; filename="${i}"`),e.sendFile(S("path").resolve(g))}catch(s){l(s,t,e,"users/payment-evidence")}}),r.put("/api/users/payment-evidence/:registrationId",y,async(t,e)=>{try{let{registrationId:s}=t.params;if(!t.files||!t.files.evidenceFile)return e.status(400).json({message:"No evidence file provided"});let n=Array.isArray(t.files.evidenceFile)?t.files.evidenceFile[0]:t.files.evidenceFile,a=await d.getEventRegistration(s);if(!a)return e.status(404).json({message:"Registration not found"});if(a.userId!==t.supabaseUser.id)return e.status(403).json({message:"Access denied"});if(!["image/jpeg","image/png","application/pdf"].includes(n.mimetype))return e.status(400).json({message:"Invalid file type. Only JPEG, PNG, and PDF files are allowed."});let i=10*1024*1024;if(n.size>i)return e.status(400).json({message:"File too large. Maximum size is 10MB."});let c=S("fs"),u=S("path"),g=`./attached_assets/${a.userId}/${a.eventId}`;c.existsSync(g)||c.mkdirSync(g,{recursive:!0});let w=u.extname(n.name),h=`payment_evidence_${Date.now()}${w}`,p=u.join(g,h),_=`${a.userId}/${a.eventId}/${h}`;if(a.paymentEvidence){let j=`./attached_assets/${a.paymentEvidence}`;c.existsSync(j)&&c.unlinkSync(j)}await n.mv(p);let R=await d.updateEventRegistration(s,{paymentEvidence:_});console.log(`\u2705 User updated payment evidence for registration ${s}`),e.json({message:"Payment evidence updated successfully",evidencePath:_,originalName:n.name})}catch(s){l(s,t,e,"users/payment-evidence/update")}}),r.post("/api/newsletter/subscribe",async(t,e)=>{try{let s=q.parse(t.body),n=await d.getNewsletterSubscriptionByEmail(s.email);if(n)return e.status(200).json({message:"Email is already subscribed to newsletter",subscription:n});let a=await d.createNewsletterSubscription(s);console.log(`\u2705 New newsletter subscription: ${s.email}`),e.status(201).json({message:"Successfully subscribed to newsletter",subscription:a})}catch(s){l(s,t,e,"newsletter/subscribe")}}),r.post("/api/notifications/registration-confirmation",async(t,e)=>{try{let{email:s,eventId:n,fullName:a}=t.body;if(!s||!n||!a)return e.status(400).json({message:"Missing required fields"});let o=await d.getEvent(n);if(!o)return e.status(404).json({message:"Event not found"});console.log("\u{1F4E7} Registration confirmation email queued:",{to:s,eventTitle:o.title,participantName:a}),e.json({message:"Registration confirmation email queued",details:{email:s,eventTitle:o.title,participantName:a,status:"queued"}})}catch(s){l(s,t,e,"notifications/registration-confirmation")}}),r.patch("/api/users/:userId/profile",y,x(),async(t,e)=>{try{let{userId:s}=t.params,{firstName:n,lastName:a,phoneNumber:o}=t.body;if(!await d.getUser(s))return e.status(404).json({message:"User not found"});e.json({message:"Profile update functionality not yet implemented",requestedUpdates:{firstName:n,lastName:a,phoneNumber:o}})}catch(s){l(s,t,e,"users/profile/update")}})}function re(r){r.get("/api/events",async(t,e)=>{try{let n=(await d.getAllEvents()).map(a=>({...a}));n.sort((a,o)=>new Date(a.startDate).getTime()-new Date(o.startDate).getTime()),e.json(n)}catch(s){l(s,t,e,"events/list")}}),r.get("/api/events/upcoming",async(t,e)=>{try{let s=await d.getAllEvents(),n=new Date,a=s.filter(i=>new Date(i.startDate)>n);a.sort((i,c)=>new Date(i.startDate).getTime()-new Date(c.startDate).getTime());let o=await Promise.all(a.map(async i=>{try{let u=(await d.getEventRegistrationsByEvent(i.id)).filter(g=>g.paymentStatus!=="cancelled");return{...i,currentRegistrations:u.length,availableSpots:i.maxAttendees?Math.max(0,i.maxAttendees-u.length):null,isFull:i.maxAttendees?u.length>=i.maxAttendees:!1}}catch(c){return console.error(`Error getting stats for event ${i.id}:`,c),{...i,currentRegistrations:0,availableSpots:i.maxAttendees||null,isFull:!1}}}));e.json(o)}catch(s){l(s,t,e,"events/upcoming")}}),r.get("/api/events/past",async(t,e)=>{try{let s=await d.getAllEvents(),n=new Date,a=s.filter(o=>new Date(o.startDate)<=n);a.sort((o,i)=>new Date(i.startDate).getTime()-new Date(o.startDate).getTime()),e.json(a)}catch(s){l(s,t,e,"events/past")}}),r.get("/api/events/category/:category",async(t,e)=>{try{let{category:s}=t.params,a=(await d.getAllEvents()).filter(o=>o.tags&&o.tags.some(i=>i.toLowerCase()===s.toLowerCase()));a.sort((o,i)=>new Date(o.startDate).getTime()-new Date(i.startDate).getTime()),e.json(a)}catch(s){l(s,t,e,"events/category")}}),r.get("/api/events/search",async(t,e)=>{try{let{q:s,location:n,date_from:a,date_to:o}=t.query,i=await d.getAllEvents();if(s&&typeof s=="string"){let u=s.toLowerCase();i=i.filter(g=>g.title?.toLowerCase().includes(u)||g.description?.toLowerCase().includes(u)||g.location?.toLowerCase().includes(u))}if(n&&typeof n=="string"){let u=n.toLowerCase();i=i.filter(g=>g.location?.toLowerCase().includes(u))}if(a&&typeof a=="string"){let u=new Date(a);i=i.filter(g=>new Date(g.startDate)>=u)}if(o&&typeof o=="string"){let u=new Date(o);i=i.filter(g=>new Date(g.startDate)<=u)}let c=new Date;i.sort((u,g)=>{let w=new Date(u.startDate)>c,h=new Date(g.startDate)>c;return w&&!h?-1:!w&&h?1:new Date(u.startDate).getTime()-new Date(g.startDate).getTime()}),e.json({query:{search:s,location:n,date_from:a,date_to:o},results:i,count:i.length})}catch(s){l(s,t,e,"events/search")}}),r.get("/api/events/:eventId",async(t,e)=>{try{let{eventId:s}=t.params,n=await d.getEvent(s);if(!n)return e.status(404).json({message:"Event not found"});let a=await d.getEventRegistrationsByEvent(s),o=a.filter(c=>c.paymentStatus!=="cancelled"),i={...n,registrationStats:{totalRegistrations:a.length,activeRegistrations:o.length,availableSpots:n.maxAttendees?Math.max(0,n.maxAttendees-o.length):null,isFull:n.maxAttendees?o.length>=n.maxAttendees:!1}};e.json(i)}catch(s){l(s,t,e,"events/details")}})}async function ne(r){return r.use(le({limits:{fileSize:10*1024*1024},abortOnLimit:!0,useTempFiles:!0,tempFileDir:"/tmp/",debug:!1})),Z(r),te(r),se(r),re(r),ue(r)}var me=ge(import.meta.url),pe=O.dirname(me),b=B();b.use(B.json({limit:"10mb"}));b.use(B.urlencoded({extended:!1,limit:"10mb"}));b.use((r,t,e)=>{let s=Date.now();t.on("finish",()=>{let n=Date.now()-s;r.path.startsWith("/api")&&console.log(`${r.method} ${r.path} ${t.statusCode} in ${n}ms`)}),e()});b.get("/api/health",(r,t)=>{t.json({status:"ok",timestamp:new Date().toISOString(),memory:process.memoryUsage(),uptime:process.uptime()})});var k=O.join(pe,"../public");b.use(B.static(k,{maxAge:"1d",etag:!1}));ne(b).then(()=>{console.log("\u2705 API routes registered successfully")}).catch(r=>{console.error("\u274C Failed to register routes:",r.message),process.exit(1)});b.get("*",(r,t)=>{if(r.path.startsWith("/api"))return t.status(404).json({message:"API route not found"});let e=O.join(k,"index.html");if(!S("fs").existsSync(e))return console.error(`Client build not found at ${e}`),t.status(503).json({message:"Client application not built yet",hint:"Run 'npm run build:client' first",path:e});t.sendFile(e,s=>{s&&(console.error("Error serving index.html:",s.message),t.status(500).json({message:"Server error"}))})});b.use((r,t,e,s)=>{console.error(`Error: ${r.message}`);let n=r.status||r.statusCode||500;e.status(n).json({message:process.env.NODE_ENV==="production"?"Internal Server Error":r.message})});var ae=parseInt(process.env.PORT||"5005",10),fe=b.listen(ae,"0.0.0.0",()=>{console.log(`\u{1F680} Server running on port ${ae}`),console.log(`\u{1F4C1} Serving static files from: ${k}`),console.log(`\u{1F4BE} Memory usage: ${Math.round(process.memoryUsage().heapUsed/1024/1024)}MB`)}),C=r=>{console.log(`${r} received, shutting down gracefully`),fe.close(()=>{console.log("Process terminated"),process.exit(0)}),setTimeout(()=>{console.log("Forcing exit..."),process.exit(1)},1e4)};process.on("SIGTERM",()=>C("SIGTERM"));process.on("SIGINT",()=>C("SIGINT"));process.on("uncaughtException",r=>{console.error("Uncaught Exception:",r),C("UNCAUGHT_EXCEPTION")});process.on("unhandledRejection",(r,t)=>{console.error("Unhandled Rejection at:",t,"reason:",r),C("UNHANDLED_REJECTION")});var ct=b;export{ct as default};
