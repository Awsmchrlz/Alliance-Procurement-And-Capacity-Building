var Z=(n=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(n,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):n)(function(n){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+n+'" is not supported')});import"dotenv/config";import C from"express";import T from"path";import{fileURLToPath as ae}from"url";import{createServer as re}from"http";import{createClient as ee}from"@supabase/supabase-js";var V=process.env.SUPABASE_URL,k=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!V||!k)throw new Error("Supabase URL and service role key must be provided");var g=ee(V,k),l={async generateRegistrationNumber(){try{let{count:n,error:r}=await g.from("event_registrations").select("*",{count:"exact",head:!0});if(r)throw console.error("Error getting registration count:",r),r;return((n||0)+1).toString().padStart(4,"0")}catch(n){throw console.error("Error generating registration number:",n),n}},async getUser(n){try{let{data:r,error:t}=await g.from("users").select("id, first_name, last_name, phone_number, created_at").eq("id",n).single();if(t||!r){console.error("Error fetching user from users table:",t?.message);return}let{data:e,error:s}=await g.auth.admin.getUserById(n);if(s||!e.user){console.error("Error fetching auth user:",s?.message);return}return{id:r.id,email:e.user.email||"",firstName:r.first_name,lastName:r.last_name,phoneNumber:r.phone_number,role:e.user.user_metadata?.role||"ordinary_user",createdAt:r.created_at}}catch(r){console.error("Error in getUser:",r.message);return}},async getUserByEmail(n){try{let{data:r,error:t}=await g.auth.admin.listUsers();if(t){console.error("Error fetching auth users:",t.message);return}let e=r.users.find(o=>o.email===n);if(!e)return;let{data:s,error:a}=await g.from("users").select("id, first_name, last_name, phone_number, created_at").eq("id",e.id).single();if(a||!s){console.error("Error fetching user by email from users table:",a?.message);return}return{id:s.id,email:e.email||"",firstName:s.first_name,lastName:s.last_name,phoneNumber:s.phone_number,role:e.user_metadata?.role||"ordinary_user",createdAt:s.created_at}}catch(r){console.error("Error in getUserByEmail:",r.message);return}},async createUser(n){try{let{data:r,error:t}=await g.auth.admin.createUser({email:n.email,password:n.password,user_metadata:{role:n.role||"ordinary_user",first_name:n.firstName,last_name:n.lastName,phone_number:n.phoneNumber}});if(t)throw console.error("Error creating auth user:",t.message),new Error(`Failed to create auth user: ${t.message}`);let{data:e,error:s}=await g.from("users").insert({id:r.user.id,first_name:n.firstName,last_name:n.lastName,phone_number:n.phoneNumber}).select("id, first_name, last_name, phone_number, created_at").single();if(s)throw console.error("Error creating user in users table:",s.message),new Error(`Failed to create user: ${s.message}`);return{id:e.id,email:n.email,firstName:e.first_name,lastName:e.last_name,phoneNumber:e.phone_number,role:n.role||"ordinary_user",createdAt:e.created_at}}catch(r){throw console.error("Error in createUser:",r.message),new Error(`Failed to create user: ${r.message}`)}},async getAllUsers(){try{let{data:n,error:r}=await g.from("users").select("id, first_name, last_name, phone_number, created_at");if(r)throw console.error("Error fetching all users:",r.message),new Error(`Failed to fetch users: ${r.message}`);return(await Promise.all(n.map(async e=>{let{data:s,error:a}=await g.auth.admin.getUserById(e.id);if(a){console.error(`Error fetching auth user ${e.id}:`,a.message);return}return{id:e.id,email:s.user.email||"",firstName:e.first_name,lastName:e.last_name,phoneNumber:e.phone_number,role:s.user.user_metadata?.role||"ordinary_user",createdAt:e.created_at?new Date(e.created_at):null}}))).filter(e=>e!==void 0)}catch(n){throw console.error("Error in getAllUsers:",n.message),new Error(`Failed to fetch users: ${n.message}`)}},async getEvent(n){try{let{data:r,error:t}=await g.from("events").select("*").eq("id",n).single();if(t){console.error("Error fetching event:",t.message);return}return{id:r.id,title:r.title,description:r.description,startDate:r.start_date,endDate:r.end_date,location:r.location,price:r.price,maxAttendees:r.max_attendees,currentAttendees:r.current_attendees,imageUrl:r.image_url,tags:r.tags,featured:r.featured,createdAt:r.created_at}}catch(r){console.error("Error in getEvent:",r.message);return}},async getAllEvents(){try{let{data:n,error:r}=await g.from("events").select("*").order("start_date");if(r)throw console.error("Error fetching all events:",r.message),new Error(`Failed to fetch events: ${r.message}`);return n.map(t=>({id:t.id,title:t.title,description:t.description,startDate:t.start_date,endDate:t.end_date,location:t.location,price:t.price,maxAttendees:t.max_attendees,currentAttendees:t.current_attendees,imageUrl:t.image_url,tags:t.tags,featured:t.featured,createdAt:t.created_at}))}catch(n){throw console.error("Error in getAllEvents:",n.message),new Error(`Failed to fetch events: ${n.message}`)}},async createEvent(n){try{let{data:r,error:t}=await g.from("events").insert({title:n.title,description:n.description,start_date:n.startDate,end_date:n.endDate,location:n.location,price:n.price,max_attendees:n.maxAttendees,image_url:n.imageUrl,tags:n.tags,featured:n.featured}).select().single();if(t)throw console.error("Error creating event:",t.message),new Error(`Failed to create event: ${t.message}`);return{id:r.id,title:r.title,description:r.description,startDate:r.start_date,endDate:r.end_date,location:r.location,price:r.price,maxAttendees:r.max_attendees,currentAttendees:r.current_attendees,imageUrl:r.image_url,tags:r.tags,featured:r.featured,createdAt:r.created_at}}catch(r){throw console.error("Error in createEvent:",r.message),new Error(`Failed to create event: ${r.message}`)}},async updateEvent(n,r){try{let{data:t,error:e}=await g.from("events").update({title:r.title,description:r.description,start_date:r.startDate,end_date:r.endDate,location:r.location,price:r.price,max_attendees:r.maxAttendees,current_attendees:r.currentAttendees,image_url:r.imageUrl,tags:r.tags,featured:r.featured}).eq("id",n).select().single();if(e){console.error("Error updating event:",e.message);return}return{id:t.id,title:t.title,description:t.description,startDate:t.start_date,endDate:t.end_date,location:t.location,price:t.price,maxAttendees:t.max_attendees,currentAttendees:t.current_attendees,imageUrl:t.image_url,tags:t.tags,featured:t.featured,createdAt:t.created_at}}catch(t){console.error("Error in updateEvent:",t.message);return}},async deleteEvent(n){try{let{error:r}=await g.from("events").delete().eq("id",n);return r?(console.error("Error deleting event:",r.message),!1):!0}catch(r){return console.error("Error in deleteEvent:",r.message),!1}},async getEventRegistration(n){try{let{data:r,error:t}=await g.from("event_registrations").select("*").eq("id",n).single();if(t){console.error("Error fetching event registration:",t.message);return}return{id:r.id,registrationNumber:r.registration_number,eventId:r.event_id,userId:r.user_id,paymentStatus:r.payment_status,title:r.title,gender:r.gender,country:r.country,organization:r.organization,organizationType:r.organization_type,position:r.position,notes:r.notes,hasPaid:r.has_paid,paymentEvidence:r.payment_evidence,registeredAt:r.registered_at}}catch(r){console.error("Error in getEventRegistration:",r.message);return}},async getEventRegistrationsByUser(n){try{let{data:r,error:t}=await g.from("event_registrations").select("*").eq("user_id",n);if(t)throw console.error("Error fetching user registrations:",t.message),new Error(`Failed to fetch registrations: ${t.message}`);return r.map(e=>({id:e.id,registrationNumber:e.registration_number,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registeredAt:e.registered_at}))}catch(r){throw console.error("Error in getEventRegistrationsByUser:",r.message),new Error(`Failed to fetch registrations: ${r.message}`)}},async getEventRegistrationsByEvent(n){try{let{data:r,error:t}=await g.from("event_registrations").select("*").eq("event_id",n);if(t)throw console.error("Error fetching event registrations:",t.message),new Error(`Failed to fetch registrations: ${t.message}`);return r.map(e=>({id:e.id,registrationNumber:e.registration_number,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registeredAt:e.registered_at}))}catch(r){throw console.error("Error in getEventRegistrationsByEvent:",r.message),new Error(`Failed to fetch registrations: ${r.message}`)}},async getAllEventRegistrations(){try{let{data:n,error:r}=await g.from("event_registrations").select("*");if(r)throw console.error("Error fetching all registrations:",r.message),new Error(`Failed to fetch registrations: ${r.message}`);return n.map(t=>({id:t.id,registrationNumber:t.registration_number,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registeredAt:t.registered_at}))}catch(n){throw console.error("Error in getAllEventRegistrations:",n.message),new Error(`Failed to fetch registrations: ${n.message}`)}},async createEventRegistration(n){try{let r=await this.generateRegistrationNumber(),{data:t,error:e}=await g.from("event_registrations").insert({registration_number:r,event_id:n.eventId,user_id:n.userId,payment_status:n.paymentStatus||"pending",title:n.title,gender:n.gender,country:n.country,organization:n.organization,organization_type:n.organizationType,position:n.position,notes:n.notes,has_paid:n.hasPaid||!1,payment_evidence:n.paymentEvidence}).select().single();if(e)throw console.error("Error creating event registration:",e.message),new Error(`Failed to create registration: ${e.message}`);return await g.rpc("increment_attendees",{event_id:n.eventId}).then(({error:s})=>{s&&console.error("Error incrementing attendees:",s.message)}),{id:t.id,registrationNumber:t.registration_number,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registeredAt:t.registered_at}}catch(r){throw console.error("Error in createEventRegistration:",r.message),new Error(`Failed to create registration: ${r.message}`)}},async updateEventRegistration(n,r){try{let{data:t,error:e}=await g.from("event_registrations").update({payment_status:r.paymentStatus,title:r.title,gender:r.gender,country:r.country,organization:r.organization,organization_type:r.organizationType,position:r.position,notes:r.notes,has_paid:r.hasPaid,payment_evidence:r.paymentEvidence}).eq("id",n).select().single();if(e){console.error("Error updating event registration:",e.message);return}return{id:t.id,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registrationNumber:t.registration_number,registeredAt:t.registered_at}}catch(t){console.error("Error in updateEventRegistration:",t.message);return}},async cancelEventRegistration(n){try{let{data:r,error:t}=await g.from("event_registrations").select("event_id").eq("id",n).single();if(t)throw console.error("Error fetching registration for cancellation:",t.message),new Error(`Failed to fetch registration: ${t.message}`);let{error:e}=await g.from("event_registrations").update({payment_status:"cancelled",has_paid:!1}).eq("id",n);if(e)throw console.error("Error cancelling event registration:",e.message),new Error(`Failed to cancel registration: ${e.message}`);await g.rpc("decrement_attendees",{event_id:r.event_id}).then(({error:s})=>{s&&console.error("Error decrementing attendees:",s.message)})}catch(r){throw console.error("Error in cancelEventRegistration:",r.message),new Error(`Failed to cancel registration: ${r.message}`)}},async deleteEventRegistration(n){try{let{data:r,error:t}=await g.from("event_registrations").select("event_id, payment_evidence").eq("id",n).single();if(t)throw console.error("Error fetching registration for deletion:",t.message),new Error(`Failed to fetch registration: ${t.message}`);if(r.payment_evidence){let{error:s}=await g.storage.from("registrations").remove([r.payment_evidence]);if(s)throw console.error("Error deleting payment evidence:",s.message),new Error(`Failed to delete payment evidence: ${s.message}`)}let{error:e}=await g.from("event_registrations").delete().eq("id",n);if(e)throw console.error("Error deleting event registration:",e.message),new Error(`Failed to delete registration: ${e.message}`);await g.rpc("decrement_attendees",{event_id:r.event_id}).then(({error:s})=>{s&&console.error("Error decrementing attendees:",s.message)})}catch(r){throw console.error("Error in deleteEventRegistration:",r.message),new Error(`Failed to delete registration: ${r.message}`)}},async createNewsletterSubscription(n){try{let{data:r,error:t}=await g.from("newsletter_subscriptions").insert({email:n.email,name:n.name}).select().single();if(t)throw console.error("Error creating newsletter subscription:",t.message),new Error(`Failed to create subscription: ${t.message}`);return{id:r.id,email:r.email,name:r.name,subscribedAt:r.subscribed_at}}catch(r){throw console.error("Error in createNewsletterSubscription:",r.message),new Error(`Failed to create subscription: ${r.message}`)}},async getNewsletterSubscriptionByEmail(n){try{let{data:r,error:t}=await g.from("newsletter_subscriptions").select("*").eq("email",n).single();if(t){console.error("Error fetching newsletter subscription:",t.message);return}return{id:r.id,email:r.email,name:r.name,subscribedAt:r.subscribed_at}}catch(r){console.error("Error in getNewsletterSubscriptionByEmail:",r.message);return}},async getAllNewsletterSubscriptions(){try{let{data:n,error:r}=await g.from("newsletter_subscriptions").select("*");if(r)throw console.error("Error fetching all newsletter subscriptions:",r.message),new Error(`Failed to fetch subscriptions: ${r.message}`);return n.map(t=>({id:t.id,email:t.email,name:t.name,subscribedAt:t.subscribed_at}))}catch(n){throw console.error("Error in getAllNewsletterSubscriptions:",n.message),new Error(`Failed to fetch subscriptions: ${n.message}`)}}};import{sql as F}from"drizzle-orm";import{pgTable as B,text as v,varchar as I,timestamp as N,boolean as q,decimal as te,integer as O}from"drizzle-orm/pg-core";import{createInsertSchema as M}from"drizzle-zod";import{z as m}from"zod";var Y=B("users",{id:I("id").primaryKey().default(F`gen_random_uuid()`),email:v("email").notNull().unique(),password:v("password").notNull(),firstName:v("first_name").notNull(),lastName:v("last_name").notNull(),phoneNumber:v("phone_number"),role:v("role").notNull().default("admin"),createdAt:N("created_at").defaultNow()}),W=B("events",{id:I("id").primaryKey().default(F`gen_random_uuid()`),title:v("title").notNull(),description:v("description").notNull(),startDate:N("start_date").notNull(),endDate:N("end_date").notNull(),location:v("location"),price:te("price",{precision:10,scale:2}).notNull(),maxAttendees:O("max_attendees"),currentAttendees:O("current_attendees").default(0),imageUrl:v("image_url"),tags:v("tags").array(),featured:q("featured").default(!1),createdAt:N("created_at").defaultNow()}),ye=B("event_registrations",{id:I("id").primaryKey().default(F`gen_random_uuid()`),registrationNumber:v("registration_number").notNull().unique(),userId:I("user_id").notNull().references(()=>Y.id),eventId:I("event_id").notNull().references(()=>W.id),paymentStatus:v("payment_status").notNull().default("pending"),registeredAt:N("registered_at").defaultNow(),title:v("title"),gender:v("gender"),country:v("country"),organization:v("organization"),organizationType:v("organization_type"),position:v("position"),notes:v("notes"),hasPaid:q("has_paid").default(!1),paymentEvidence:v("payment_evidence")}),ve=B("newsletter_subscriptions",{id:I("id").primaryKey().default(F`gen_random_uuid()`),email:v("email").notNull().unique(),name:v("name"),subscribedAt:N("subscribed_at").defaultNow()}),G=M(Y).omit({id:!0,createdAt:!0}),Ee=M(W).omit({id:!0,createdAt:!0,currentAttendees:!0}),H=m.object({eventId:m.string(),userId:m.string(),title:m.string(),gender:m.string(),country:m.string(),organization:m.string(),organizationType:m.string(),position:m.string(),notes:m.string().optional().nullable(),hasPaid:m.boolean().optional().default(!1),paymentStatus:m.enum(["pending","paid","cancelled"]).optional().default("pending"),paymentMethod:m.string().optional().nullable(),currency:m.string().optional().nullable(),pricePaid:m.number().optional().nullable(),paymentEvidence:m.string().optional().nullable()}),J=m.object({email:m.string().email(),name:m.string().optional().nullable()}),he=m.object({id:m.string().uuid(),registrationId:m.string().uuid(),filePath:m.string(),uploadedAt:m.string().datetime()}),_e=m.object({registrationId:m.string().uuid(),filePath:m.string()});import{createClient as R}from"@supabase/supabase-js";import se from"express-fileupload";var y={SuperAdmin:"super_admin",Finance:"finance_person",EventManager:"event_manager",Ordinary:"ordinary_user"},ne=(n,r)=>!!n&&r.includes(n),E=async(n,r,t)=>{try{let e=n.headers.authorization,s=e?.startsWith("Bearer ")?e.slice(7):void 0;if(!s)return r.status(401).json({message:"Access token required"});let a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)return r.status(500).json({message:"Supabase server credentials not configured"});let i=R(a,o),{data:c,error:d}=await i.auth.getUser(s);if(d||!c.user)return r.status(403).json({message:"Invalid or expired token"});n.supabaseUser=c.user,n.supabaseRole=c.user.user_metadata?.role||y.Ordinary,t()}catch{return r.status(403).json({message:"Invalid or expired token"})}},S=n=>(r,t,e)=>{let s=r.supabaseRole;if(!ne(s,n))return t.status(403).json({message:"Insufficient permissions"});e()};async function X(n){return n.use(se({limits:{fileSize:10*1024*1024},abortOnLimit:!0,useTempFiles:!0,tempFileDir:"/tmp/",debug:!1})),n.post("/api/auth/register",async(t,e)=>{try{let s=G.parse(t.body);if(await l.getUserByEmail(s.email))return e.status(400).json({message:"User already exists"});let i=(await l.getAllUsers()).length===0,c=await l.createUser({...s,role:i?"super_admin":s.role||"ordinary_user"});e.status(201).json({user:c})}catch(s){console.error("Registration error:",s),e.status(400).json({message:"Invalid user data"})}}),n.post("/api/admin/users/register",E,S([y.SuperAdmin]),async(t,e)=>{try{let{firstName:s,lastName:a,email:o,phoneNumber:i,password:c,role:d}=t.body;if(!s||!a||!o||!c||!d)return e.status(400).json({message:"Missing required fields"});if(await l.getUserByEmail(o))return e.status(400).json({message:"User already exists"});let u=process.env.SUPABASE_URL,_=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!u||!_)return e.status(500).json({message:"Server configuration error"});let p=R(u,_),{data:w,error:b}=await p.auth.admin.createUser({email:o,password:c,email_confirm:!0,user_metadata:{first_name:s,last_name:a,phone_number:i,role:d}});if(b)return console.error("Supabase auth error:",b),e.status(500).json({message:"Failed to create user account"});if(!w.user)return e.status(500).json({message:"Failed to create user"});let f=await l.createUser({firstName:s,lastName:a,email:o,password:c,phoneNumber:i||null,role:d});console.log(`\u2705 Admin created user: ${o} with role: ${d}`),e.status(201).json({message:"User created successfully",user:{id:f.id,firstName:f.firstName,lastName:f.lastName,email:f.email,phoneNumber:f.phoneNumber,role:f.role,createdAt:f.createdAt}})}catch(s){console.error("Admin user registration error:",s),e.status(500).json({message:"Failed to create user",details:s.message})}}),n.post("/api/auth/login",async(t,e)=>{try{let{email:s,password:a}=t.body;if(!s||!a)return e.status(400).json({message:"Email and password required"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return e.status(500).json({message:"Supabase server credentials not configured"});let c=R(o,i),{data:d,error:h}=await c.auth.signInWithPassword({email:s,password:a});if(h||!d.user)return e.status(401).json({message:"Invalid credentials"});let u=await l.getUser(d.user.id);if(!u)return e.status(404).json({message:"User not found"});e.json({user:u,token:d.session.access_token})}catch(s){console.error("Login error:",s),e.status(500).json({message:"Login failed"})}}),n.get("/api/events",async(t,e)=>{try{let s=await l.getAllEvents();e.json(s)}catch(s){console.error("Error fetching events:",s),e.status(500).json({message:"Failed to fetch events"})}}),n.post("/api/events/register",E,async(t,e)=>{try{let s=H.parse(t.body);if(s.userId!==t.supabaseUser.id)return e.status(403).json({message:"Can only register for yourself"});if((await l.getEventRegistrationsByUser(s.userId)).some(d=>d.eventId===s.eventId&&d.paymentStatus!=="cancelled"))return e.status(400).json({message:"Already registered for this event"});let i=await l.getEvent(s.eventId);if(!i)return e.status(404).json({message:"Event not found"});if(i.maxAttendees&&i.currentAttendees&&i.currentAttendees>=i.maxAttendees)return e.status(400).json({message:"Event is full"});let c=await l.createEventRegistration({...s,paymentStatus:"pending",hasPaid:!1});e.status(201).json(c)}catch(s){console.error("Registration error:",s),e.status(400).json({message:"Registration failed"})}}),n.post("/api/admin/events/register",E,S([y.EventManager,y.SuperAdmin]),async(t,e)=>{try{let{userId:s,eventId:a,title:o,gender:i,country:c,organization:d,organizationType:h,position:u,notes:_,hasPaid:p,paymentStatus:w}=t.body;if(!s||!a||!o||!i||!c||!d||!u)return e.status(400).json({message:"Missing required fields"});if(!await l.getUser(s))return e.status(404).json({message:"User not found"});let f=await l.getEvent(a);if(!f)return e.status(404).json({message:"Event not found"});if((await l.getEventRegistrationsByUser(s)).some(x=>x.eventId===a&&x.paymentStatus!=="cancelled"))return e.status(400).json({message:"User is already registered for this event"});if(f.maxAttendees&&f.currentAttendees&&f.currentAttendees>=f.maxAttendees)return e.status(400).json({message:"Event is full"});let j=await l.createEventRegistration({eventId:a,userId:s,title:o,gender:i,country:c,organization:d,organizationType:h||"Other",position:u,notes:_||null,hasPaid:p||!1,paymentStatus:w||"pending",paymentEvidence:null});console.log(`\u2705 Admin registered user ${s} for event ${a}`),e.status(201).json({message:"Registration created successfully",registration:{id:j.id,eventId:j.eventId,userId:j.userId,paymentStatus:j.paymentStatus,registeredAt:j.registeredAt}})}catch(s){console.error("Admin event registration error:",s),e.status(500).json({message:"Failed to create registration",details:s.message})}}),n.post("/api/notifications/registration-confirmation",async(t,e)=>{try{let{email:s,eventId:a,fullName:o}=t.body;if(!s||!a||!o)return e.status(400).json({message:"Email, eventId, and fullName required"});let i=await l.getEvent(a);if(!i)return e.status(404).json({message:"Event not found"});console.log(`\u{1F4E7} Sending confirmation email to: ${s}`),console.log(`   Event ID: ${a}`),console.log(`   Event Title: ${i.title}`),console.log(`   Full Name: ${o}`),e.json({success:!0,message:"Email queued for sending"})}catch(s){console.error("Email error:",s),e.status(500).json({message:"Failed to send confirmation"})}}),n.get("/api/users/:userId/registrations",E,async(t,e)=>{try{let{userId:s}=t.params;if(t.supabaseRole!=="super_admin"&&t.supabaseRole!=="finance_person"&&t.supabaseUser.id!==s)return e.status(403).json({message:"Access denied"});let a=await l.getEventRegistrationsByUser(s),o=await Promise.all(a.map(async i=>{let c=await l.getEvent(i.eventId);return{...i,event:c}}));e.json(o)}catch(s){console.error("Error fetching registrations:",s),e.status(500).json({message:"Failed to fetch registrations"})}}),n.patch("/api/users/:userId/registrations/:registrationId/cancel",E,async(t,e)=>{try{let{userId:s,registrationId:a}=t.params;if(t.supabaseRole!=="super_admin"&&t.supabaseRole!=="finance_person"&&t.supabaseUser.id!==s)return e.status(403).json({message:"Access denied"});let o=await l.getEventRegistration(a);if(!o)return e.status(404).json({message:"Registration not found"});if(t.supabaseRole!=="super_admin"&&t.supabaseRole!=="finance_person"&&o.userId!==s)return e.status(403).json({message:"Access denied"});if(o.paymentStatus==="cancelled")return e.status(400).json({message:"Registration is already cancelled"});await l.cancelEventRegistration(a),e.json({message:"Registration cancelled successfully"})}catch(s){console.error("Error cancelling registration:",s),e.status(500).json({message:"Failed to cancel registration"})}}),n.delete("/api/users/:userId/registrations/:registrationId",E,S(["super_admin"]),async(t,e)=>{try{let{userId:s,registrationId:a}=t.params;if(!await l.getEventRegistration(a))return e.status(404).json({message:"Registration not found"});await l.deleteEventRegistration(a),e.json({message:"Registration deleted successfully"})}catch(s){console.error("Error deleting registration:",s),e.status(500).json({message:"Failed to delete registration"})}}),n.post("/api/newsletter/subscribe",async(t,e)=>{try{let s=J.parse(t.body),a=await l.getNewsletterSubscriptionByEmail(s.email);if(a)return e.status(200).json({message:"Already subscribed",subscription:a});let o=await l.createNewsletterSubscription(s);e.status(201).json(o)}catch(s){console.error("Subscription error:",s),e.status(400).json({message:"Subscription failed"})}}),n.get("/api/admin/events",E,S([y.SuperAdmin,y.Finance,y.EventManager]),async(t,e)=>{try{let s=await l.getAllEvents();e.json(s)}catch(s){console.error("Error fetching admin events:",s),e.status(500).json({message:"Failed to fetch events"})}}),n.get("/api/admin/users",E,S([y.SuperAdmin]),async(t,e)=>{try{let s=process.env.SUPABASE_URL,a=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!s||!a)return e.status(500).json({message:"Supabase server credentials not configured"});let o=R(s,a),i=[],c=1e3,d=1;for(;;){let{data:u,error:_}=await o.auth.admin.listUsers({page:d,perPage:c});if(_)throw _;let p=u.users||[];if(p.length===0||(i.push(...p),p.length<c))break;d+=1}let h=await Promise.all(i.map(async u=>await l.getUser(u.id)||{id:u.id,email:u.email||"",firstName:u.user_metadata?.first_name||"",lastName:u.user_metadata?.last_name||"",phoneNumber:u.user_metadata?.phone_number||"",role:u.user_metadata?.role||"ordinary_user",createdAt:u.created_at}));e.json(h)}catch(s){console.error("Error fetching admin users:",s),e.status(500).json({message:"Failed to fetch users"})}}),n.get("/api/admin/registrations",E,S([y.SuperAdmin,y.Finance,y.EventManager]),async(t,e)=>{try{let s=await l.getAllEventRegistrations(),a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY,i=a&&o?R(a,o):null,c=await Promise.all(s.map(async d=>{let h=await l.getEvent(d.eventId),u;if(i)try{let{data:_}=await i.auth.admin.getUserById(d.userId),p=_?.user;p&&(u={id:p.id,email:p.email,firstName:p.user_metadata?.first_name||"",lastName:p.user_metadata?.last_name||""})}catch{}return{...d,event:h,user:u}}));e.json(c)}catch(s){console.error("Error fetching admin registrations:",s),e.status(500).json({message:"Failed to fetch registrations"})}}),n.patch("/api/admin/registrations/:registrationId",E,S([y.SuperAdmin,y.Finance]),async(t,e)=>{try{let{registrationId:s}=t.params,{paymentStatus:a,hasPaid:o}=t.body;if(!a&&o===void 0)return e.status(400).json({message:"No updates provided"});let i=await l.updateEventRegistration(s,{paymentStatus:a,hasPaid:o});if(!i)return e.status(404).json({message:"Registration not found"});e.json(i)}catch(s){console.error("Error updating registration:",s),e.status(500).json({message:"Failed to update registration"})}}),n.patch("/api/admin/users/:userId/role",E,S([y.SuperAdmin]),async(t,e)=>{try{let{userId:s}=t.params,{role:a}=t.body;if(!a||!["super_admin","finance_person","event_manager","ordinary_user"].includes(a))return e.status(400).json({message:"Invalid role"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return e.status(500).json({message:"Supabase server credentials not configured"});let c=R(o,i),{error:d}=await c.auth.admin.updateUserById(s,{user_metadata:{role:a}});if(d)throw d;e.json({success:!0})}catch(s){console.error("Error updating user role:",s),e.status(500).json({message:"Failed to update user role"})}}),n.get("/api/admin/newsletter-subscriptions",E,S([y.SuperAdmin]),async(t,e)=>{try{let s=await l.getAllNewsletterSubscriptions();e.json(s)}catch(s){console.error("Error fetching newsletter subscriptions:",s),e.status(500).json({message:"Failed to fetch subscriptions"})}}),n.post("/api/admin/email-blast",E,S([y.SuperAdmin]),async(t,e)=>{try{let{subject:s,message:a,fromName:o="Alliance Procurement",fromEmail:i="no-reply@apcb.com"}=t.body;if(!s||!a)return e.status(400).json({message:"Subject and message are required"});let c=await l.getAllNewsletterSubscriptions();console.log(`\u{1F4E7} Sending email blast to ${c.length} subscribers`),console.log(`   Subject: ${s}`),console.log(`   From: ${o} <${i}>`),e.json({message:`Email blast queued for ${c.length} subscribers`,results:{sent:c.length,failed:0,total:c.length}})}catch(s){console.error("Error sending email blast:",s),e.status(500).json({message:"Failed to send email blast"})}}),n.get("/evidence/:userId/:eventId/:fileName",E,async(t,e)=>{try{let{userId:s,eventId:a,fileName:o}=t.params,i=`evidence/${s||""}/${a||""}/${o||""}`;if(!(t.supabaseUser.id===s||t.supabaseRole==="super_admin"||t.supabaseRole==="finance_person"))return e.status(403).json({message:"Access denied"});let d=process.env.SUPABASE_URL,h=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!d||!h)return e.status(500).json({message:"Supabase server credentials not configured"});let u=R(d,h),_=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations",{data:p,error:w}=await u.storage.from(_).download(i);if(w)return console.error("File download error:",w),e.status(404).json({message:"File not found"});if(!p)return e.status(404).json({message:"File not found"});let b=Buffer.from(await p.arrayBuffer()),f=o.toLowerCase().split(".").pop(),A="application/octet-stream";switch(f){case"pdf":A="application/pdf";break;case"jpg":case"jpeg":A="image/jpeg";break;case"png":A="image/png";break;case"doc":A="application/msword";break;case"docx":A="application/vnd.openxmlformats-officedocument.wordprocessingml.document";break}e.set({"Content-Type":A,"Content-Disposition":`inline; filename="${o}"`,"Cache-Control":"public, max-age=31536000"}),e.send(b)}catch(s){console.error("Error serving evidence file:",s),e.status(500).json({message:"Failed to serve file"})}}),n.get("/api/admin/payment-evidence/:evidencePath",E,S([y.SuperAdmin,y.Finance]),async(t,e)=>{try{let{evidencePath:s}=t.params,a=decodeURIComponent(s);if(console.log(`\u{1F50D} Fetching evidence from path: ${a}`),!a)return console.log("\u274C No evidence path provided"),e.status(400).json({message:"Evidence path is required"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return console.error("\u274C Missing Supabase credentials"),e.status(500).json({message:"Server configuration error"});let c=R(o,i),d=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations";console.log(`\u{1FAA3} Using bucket: ${d}`),console.log(`\u{1F4C2} File path: ${a}`);let{data:h,error:u}=await c.storage.from(d).download(a||"");if(u){console.error("\u274C Storage download error:",u);let f=[a.replace("/storage/v1/object/",""),a.split("/").slice(-3).join("/"),`evidence/${a.split("/").slice(-3).join("/")}`];console.log("\u{1F504} Trying alternative paths:",f);for(let A of f)try{console.log(`\u{1F504} Attempting: ${A}`);let{data:P,error:j}=await c.storage.from(d).download(A);if(!j&&P){console.log(`\u2705 Success with alternative path: ${A}`);let x=Buffer.from(await P.arrayBuffer()),K=A.split("/").pop()||"evidence",D=K.toLowerCase().split(".").pop()||"",$="application/octet-stream";return D==="pdf"?$="application/pdf":["jpg","jpeg"].includes(D||"")?$="image/jpeg":D==="png"&&($="image/png"),e.set({"Content-Type":$,"Content-Disposition":`inline; filename="${K}"`,"Cache-Control":"private, max-age=3600"}),e.send(x)}}catch(P){console.log(`\u274C Alternative path failed: ${A}`,P)}return e.status(404).json({message:"Evidence file not found in storage",details:u.message,attemptedPaths:f})}if(!h)return console.log("\u274C No data returned from storage"),e.status(404).json({message:"Evidence file not found"});console.log("\u2705 File downloaded successfully");let _=Buffer.from(await h.arrayBuffer()),p=a.split("/").pop()||"evidence",w=p.toLowerCase().split(".").pop()||"",b="application/octet-stream";w==="pdf"?b="application/pdf":["jpg","jpeg"].includes(w||"")?b="image/jpeg":w==="png"&&(b="image/png"),e.set({"Content-Type":b,"Content-Disposition":`inline; filename="${p}"`,"Cache-Control":"private, max-age=3600"}),e.send(_)}catch(s){console.error("\u274C Evidence error:",s),e.status(500).json({message:"Server error while fetching evidence",details:s.message})}}),n.get("/api/users/payment-evidence/:evidencePath",E,async(t,e)=>{try{let{evidencePath:s}=t.params,a=decodeURIComponent(s),o=t.supabaseUser.id;if(console.log(`\u{1F50D} User ${o} fetching evidence from path: ${a}`),!a)return console.log("\u274C No evidence path provided"),e.status(400).json({message:"Evidence path is required"});if(!a.includes(o))return console.log(`\u274C User ${o} trying to access evidence not owned by them`),e.status(403).json({message:"Access denied to this evidence"});let i=process.env.SUPABASE_URL,c=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!i||!c)return console.error("\u274C Missing Supabase credentials"),e.status(500).json({message:"Server configuration error"});let d=R(i,c),h=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations";console.log(`\u{1FAA3} Using bucket: ${h}`),console.log(`\u{1F4C2} File path: ${a}`);let{data:u,error:_}=await d.storage.from(h).download(a||"");if(_)return console.error("\u274C Storage download error:",_),e.status(404).json({message:"Evidence file not found in storage",details:_.message});if(!u)return console.log("\u274C No data returned from storage"),e.status(404).json({message:"Evidence file not found"});console.log(`\u2705 File downloaded successfully for user ${o}`);let p=Buffer.from(await u.arrayBuffer()),w=a.split("/").pop()||"evidence",b=w.toLowerCase().split(".").pop()||"",f="application/octet-stream";b==="pdf"?f="application/pdf":["jpg","jpeg"].includes(b||"")?f="image/jpeg":b==="png"&&(f="image/png"),e.set({"Content-Type":f,"Content-Disposition":`inline; filename="${w}"`,"Cache-Control":"private, max-age=3600"}),e.send(p)}catch(s){console.error("\u274C User evidence error:",s),e.status(500).json({message:"Server error while fetching evidence",details:s.message})}}),n.put("/api/users/payment-evidence/:registrationId",E,async(t,e)=>e.status(403).json({message:"Evidence updates are restricted to finance"})),n.put("/api/admin/payment-evidence/:registrationId",E,async(t,e)=>{try{let{registrationId:s}=t.params,{evidenceFile:a}=t.body;if(!a)return e.status(400).json({message:"Evidence file is required"});console.log(`\u{1F504} Updating evidence for registration: ${s}`);let o=await l.getEventRegistration(s);if(!o)return e.status(404).json({message:"Registration not found"});if(o.paymentStatus==="cancelled")return e.status(400).json({message:"Cannot update evidence for cancelled registration"});let i=process.env.SUPABASE_URL,c=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!i||!c)return e.status(500).json({message:"Server configuration error"});let d=R(i,c),h=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations",u=a.name.split(".").pop(),_=`evidence_${Date.now()}.${u}`,p=`evidence/${o.userId}/${o.eventId}/${_}`,{error:w}=await d.storage.from(h).upload(p,a,{cacheControl:"3600",upsert:!1,contentType:a.type||"application/octet-stream"});if(w)return console.error("\u274C Upload error:",w),e.status(500).json({message:"Failed to upload new evidence file"});if(o.paymentEvidence)try{await d.storage.from(h).remove([o.paymentEvidence]),console.log(`\u{1F5D1}\uFE0F Deleted old evidence: ${o.paymentEvidence}`)}catch(f){console.warn("\u26A0\uFE0F Failed to delete old evidence:",f)}let b=await l.updateEventRegistration(s,{paymentEvidence:p});if(!b)return e.status(500).json({message:"Failed to update registration"});console.log(`\u2705 Evidence updated successfully: ${p}`),e.json({message:"Evidence updated successfully",registration:b,newEvidencePath:p})}catch(s){console.error("\u274C Evidence update error:",s),e.status(500).json({message:"Server error while updating evidence",details:s.message})}}),n.post("/api/admin/events",E,S([y.SuperAdmin,y.EventManager]),async(t,e)=>{try{let s=await l.createEvent(t.body);e.status(201).json(s)}catch(s){e.status(400).json({message:"Failed to create event",details:s.message})}}),n.patch("/api/admin/events/:eventId",E,S([y.SuperAdmin,y.EventManager]),async(t,e)=>{try{let s=await l.updateEvent(t.params.eventId,t.body);if(!s)return e.status(404).json({message:"Event not found"});e.json(s)}catch(s){e.status(400).json({message:"Failed to update event",details:s.message})}}),n.delete("/api/admin/events/:eventId",E,S([y.SuperAdmin,y.EventManager]),async(t,e)=>{try{if(!await l.deleteEvent(t.params.eventId))return e.status(404).json({message:"Event not found"});e.json({success:!0})}catch(s){e.status(400).json({message:"Failed to delete event",details:s.message})}}),re(n)}var oe=ae(import.meta.url),ie=T.dirname(oe),U=C();U.use(C.json({limit:"10mb"}));U.use(C.urlencoded({extended:!1,limit:"10mb"}));U.use((n,r,t)=>{let e=Date.now();r.on("finish",()=>{let s=Date.now()-e;n.path.startsWith("/api")&&console.log(`${n.method} ${n.path} ${r.statusCode} in ${s}ms`)}),t()});U.get("/api/health",(n,r)=>{r.json({status:"ok",timestamp:new Date().toISOString(),memory:process.memoryUsage(),uptime:process.uptime()})});var L=T.join(ie,"../public");U.use(C.static(L,{maxAge:"1d",etag:!1}));X(U).then(()=>{console.log("\u2705 API routes registered successfully")}).catch(n=>{console.error("\u274C Failed to register routes:",n.message),process.exit(1)});U.get("*",(n,r)=>{if(n.path.startsWith("/api"))return r.status(404).json({message:"API route not found"});let t=T.join(L,"index.html");if(!Z("fs").existsSync(t))return console.error(`Client build not found at ${t}`),r.status(503).json({message:"Client application not built yet",hint:"Run 'npm run build:client' first",path:t});r.sendFile(t,e=>{e&&(console.error("Error serving index.html:",e.message),r.status(500).json({message:"Server error"}))})});U.use((n,r,t,e)=>{console.error(`Error: ${n.message}`);let s=n.status||n.statusCode||500;t.status(s).json({message:process.env.NODE_ENV==="production"?"Internal Server Error":n.message})});var Q=parseInt(process.env.PORT||"5005",10),ce=U.listen(Q,"0.0.0.0",()=>{console.log(`\u{1F680} Server running on port ${Q}`),console.log(`\u{1F4C1} Serving static files from: ${L}`),console.log(`\u{1F4BE} Memory usage: ${Math.round(process.memoryUsage().heapUsed/1024/1024)}MB`)}),z=n=>{console.log(`${n} received, shutting down gracefully`),ce.close(()=>{console.log("Process terminated"),process.exit(0)}),setTimeout(()=>{console.log("Forcing exit..."),process.exit(1)},1e4)};process.on("SIGTERM",()=>z("SIGTERM"));process.on("SIGINT",()=>z("SIGINT"));process.on("uncaughtException",n=>{console.error("Uncaught Exception:",n),z("UNCAUGHT_EXCEPTION")});process.on("unhandledRejection",(n,r)=>{console.error("Unhandled Rejection at:",r,"reason:",n),z("UNHANDLED_REJECTION")});var Fe=U;export{Fe as default};
