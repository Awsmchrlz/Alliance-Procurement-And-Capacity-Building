var le=(s=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(s,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):s)(function(s){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+s+'" is not supported')});import"dotenv/config";import K from"express";import q from"path";import{fileURLToPath as Ee}from"url";import{createServer as ge}from"http";import{createClient as ue}from"@supabase/supabase-js";var W=process.env.SUPABASE_URL,G=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!W||!G)throw new Error("Supabase URL and service role key must be provided");var g=ue(W,G),u={async generateRegistrationNumber(){try{let{count:s,error:r}=await g.from("event_registrations").select("*",{count:"exact",head:!0});if(r)throw console.error("Error getting registration count:",r),r;return((s||0)+1).toString().padStart(4,"0")}catch(s){throw console.error("Error generating registration number:",s),s}},async getUser(s){try{let{data:r,error:t}=await g.from("users").select("id, first_name, last_name, phone_number, created_at").eq("id",s).single();if(t||!r){console.error("Error fetching user from users table:",t?.message);return}let{data:e,error:n}=await g.auth.admin.getUserById(s);if(n||!e.user){console.error("Error fetching auth user:",n?.message);return}return{id:r.id,email:e.user.email||"",firstName:r.first_name,lastName:r.last_name,phoneNumber:r.phone_number,role:e.user.user_metadata?.role||"ordinary_user",createdAt:r.created_at}}catch(r){console.error("Error in getUser:",r.message);return}},async getUserByEmail(s){try{let{data:r,error:t}=await g.auth.admin.listUsers();if(t){console.error("Error fetching auth users:",t.message);return}let e=r.users.find(o=>o.email===s);if(!e)return;let{data:n,error:a}=await g.from("users").select("id, first_name, last_name, phone_number, created_at").eq("id",e.id).single();if(a||!n){console.error("Error fetching user by email from users table:",a?.message);return}return{id:n.id,email:e.email||"",firstName:n.first_name,lastName:n.last_name,phoneNumber:n.phone_number,role:e.user_metadata?.role||"ordinary_user",createdAt:n.created_at}}catch(r){console.error("Error in getUserByEmail:",r.message);return}},async createUser(s){try{let{data:r,error:t}=await g.auth.admin.createUser({email:s.email,password:s.password,user_metadata:{role:s.role||"ordinary_user",first_name:s.firstName,last_name:s.lastName,phone_number:s.phoneNumber}});if(t)throw console.error("Error creating auth user:",t.message),new Error(`Failed to create auth user: ${t.message}`);let{data:e,error:n}=await g.from("users").insert({id:r.user.id,first_name:s.firstName,last_name:s.lastName,phone_number:s.phoneNumber}).select("id, first_name, last_name, phone_number, created_at").single();if(n)throw console.error("Error creating user in users table:",n.message),new Error(`Failed to create user: ${n.message}`);return{id:e.id,email:s.email,firstName:e.first_name,lastName:e.last_name,phoneNumber:e.phone_number,role:s.role||"ordinary_user",createdAt:e.created_at}}catch(r){throw console.error("Error in createUser:",r.message),new Error(`Failed to create user: ${r.message}`)}},async getAllUsers(){try{let{data:s,error:r}=await g.from("users").select("id, first_name, last_name, phone_number, created_at");if(r)throw console.error("Error fetching all users:",r.message),new Error(`Failed to fetch users: ${r.message}`);return(await Promise.all(s.map(async e=>{let{data:n,error:a}=await g.auth.admin.getUserById(e.id);if(a){console.error(`Error fetching auth user ${e.id}:`,a.message);return}return{id:e.id,email:n.user.email||"",firstName:e.first_name,lastName:e.last_name,phoneNumber:e.phone_number,role:n.user.user_metadata?.role||"ordinary_user",createdAt:e.created_at?new Date(e.created_at):null}}))).filter(e=>e!==void 0)}catch(s){throw console.error("Error in getAllUsers:",s.message),new Error(`Failed to fetch users: ${s.message}`)}},async getEvent(s){try{let{data:r,error:t}=await g.from("events").select("*").eq("id",s).single();if(t){console.error("Error fetching event:",t.message);return}return{id:r.id,title:r.title,description:r.description,startDate:r.start_date,endDate:r.end_date,location:r.location,price:r.price,maxAttendees:r.max_attendees,currentAttendees:r.current_attendees,imageUrl:r.image_url,tags:r.tags,featured:r.featured,createdAt:r.created_at}}catch(r){console.error("Error in getEvent:",r.message);return}},async getAllEvents(){try{let{data:s,error:r}=await g.from("events").select("*").order("start_date");if(r)throw console.error("Error fetching all events:",r.message),new Error(`Failed to fetch events: ${r.message}`);return s.map(t=>({id:t.id,title:t.title,description:t.description,startDate:t.start_date,endDate:t.end_date,location:t.location,price:t.price,maxAttendees:t.max_attendees,currentAttendees:t.current_attendees,imageUrl:t.image_url,tags:t.tags,featured:t.featured,createdAt:t.created_at}))}catch(s){throw console.error("Error in getAllEvents:",s.message),new Error(`Failed to fetch events: ${s.message}`)}},async createEvent(s){try{let{data:r,error:t}=await g.from("events").insert({title:s.title,description:s.description,start_date:s.startDate,end_date:s.endDate,location:s.location,price:s.price,max_attendees:s.maxAttendees,image_url:s.imageUrl,tags:s.tags,featured:s.featured}).select().single();if(t)throw console.error("Error creating event:",t.message),new Error(`Failed to create event: ${t.message}`);return{id:r.id,title:r.title,description:r.description,startDate:r.start_date,endDate:r.end_date,location:r.location,price:r.price,maxAttendees:r.max_attendees,currentAttendees:r.current_attendees,imageUrl:r.image_url,tags:r.tags,featured:r.featured,createdAt:r.created_at}}catch(r){throw console.error("Error in createEvent:",r.message),new Error(`Failed to create event: ${r.message}`)}},async updateEvent(s,r){try{let{data:t,error:e}=await g.from("events").update({title:r.title,description:r.description,start_date:r.startDate,end_date:r.endDate,location:r.location,price:r.price,max_attendees:r.maxAttendees,current_attendees:r.currentAttendees,image_url:r.imageUrl,tags:r.tags,featured:r.featured}).eq("id",s).select().single();if(e){console.error("Error updating event:",e.message);return}return{id:t.id,title:t.title,description:t.description,startDate:t.start_date,endDate:t.end_date,location:t.location,price:t.price,maxAttendees:t.max_attendees,currentAttendees:t.current_attendees,imageUrl:t.image_url,tags:t.tags,featured:t.featured,createdAt:t.created_at}}catch(t){console.error("Error in updateEvent:",t.message);return}},async deleteEvent(s){try{let{error:r}=await g.from("events").delete().eq("id",s);return r?(console.error("Error deleting event:",r.message),!1):!0}catch(r){return console.error("Error in deleteEvent:",r.message),!1}},async getEventRegistration(s){try{let{data:r,error:t}=await g.from("event_registrations").select("*").eq("id",s).single();if(t){console.error("Error fetching event registration:",t.message);return}return{id:r.id,registrationNumber:r.registration_number,eventId:r.event_id,userId:r.user_id,paymentStatus:r.payment_status,title:r.title,gender:r.gender,country:r.country,organization:r.organization,organizationType:r.organization_type,position:r.position,notes:r.notes,hasPaid:r.has_paid,paymentEvidence:r.payment_evidence,registeredAt:r.registered_at}}catch(r){console.error("Error in getEventRegistration:",r.message);return}},async getEventRegistrationsByUser(s){try{let{data:r,error:t}=await g.from("event_registrations").select("*").eq("user_id",s);if(t)throw console.error("Error fetching user registrations:",t.message),new Error(`Failed to fetch registrations: ${t.message}`);return r.map(e=>({id:e.id,registrationNumber:e.registration_number,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registeredAt:e.registered_at}))}catch(r){throw console.error("Error in getEventRegistrationsByUser:",r.message),new Error(`Failed to fetch registrations: ${r.message}`)}},async getEventRegistrationsByEvent(s){try{let{data:r,error:t}=await g.from("event_registrations").select("*").eq("event_id",s);if(t)throw console.error("Error fetching event registrations:",t.message),new Error(`Failed to fetch registrations: ${t.message}`);return r.map(e=>({id:e.id,registrationNumber:e.registration_number,eventId:e.event_id,userId:e.user_id,paymentStatus:e.payment_status,title:e.title,gender:e.gender,country:e.country,organization:e.organization,organizationType:e.organization_type,position:e.position,notes:e.notes,hasPaid:e.has_paid,paymentEvidence:e.payment_evidence,registeredAt:e.registered_at}))}catch(r){throw console.error("Error in getEventRegistrationsByEvent:",r.message),new Error(`Failed to fetch registrations: ${r.message}`)}},async getAllEventRegistrations(){try{let{data:s,error:r}=await g.from("event_registrations").select("*");if(r)throw console.error("Error fetching all registrations:",r.message),new Error(`Failed to fetch registrations: ${r.message}`);return s.map(t=>({id:t.id,registrationNumber:t.registration_number,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registeredAt:t.registered_at}))}catch(s){throw console.error("Error in getAllEventRegistrations:",s.message),new Error(`Failed to fetch registrations: ${s.message}`)}},async createEventRegistration(s){try{let r=await this.generateRegistrationNumber(),{data:t,error:e}=await g.from("event_registrations").insert({registration_number:r,event_id:s.eventId,user_id:s.userId,payment_status:s.paymentStatus||"pending",title:s.title,gender:s.gender,country:s.country,organization:s.organization,organization_type:s.organizationType,position:s.position,notes:s.notes,has_paid:s.hasPaid||!1,payment_evidence:s.paymentEvidence}).select().single();if(e)throw console.error("Error creating event registration:",e.message),new Error(`Failed to create registration: ${e.message}`);return await g.rpc("increment_attendees",{event_id:s.eventId}).then(({error:n})=>{n&&console.error("Error incrementing attendees:",n.message)}),{id:t.id,registrationNumber:t.registration_number,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registeredAt:t.registered_at}}catch(r){throw console.error("Error in createEventRegistration:",r.message),new Error(`Failed to create registration: ${r.message}`)}},async updateEventRegistration(s,r){try{let{data:t,error:e}=await g.from("event_registrations").update({payment_status:r.paymentStatus,title:r.title,gender:r.gender,country:r.country,organization:r.organization,organization_type:r.organizationType,position:r.position,notes:r.notes,has_paid:r.hasPaid,payment_evidence:r.paymentEvidence}).eq("id",s).select().single();if(e){console.error("Error updating event registration:",e.message);return}return{id:t.id,eventId:t.event_id,userId:t.user_id,paymentStatus:t.payment_status,title:t.title,gender:t.gender,country:t.country,organization:t.organization,organizationType:t.organization_type,position:t.position,notes:t.notes,hasPaid:t.has_paid,paymentEvidence:t.payment_evidence,registrationNumber:t.registration_number,registeredAt:t.registered_at}}catch(t){console.error("Error in updateEventRegistration:",t.message);return}},async cancelEventRegistration(s){try{let{data:r,error:t}=await g.from("event_registrations").select("event_id").eq("id",s).single();if(t)throw console.error("Error fetching registration for cancellation:",t.message),new Error(`Failed to fetch registration: ${t.message}`);let{error:e}=await g.from("event_registrations").update({payment_status:"cancelled",has_paid:!1}).eq("id",s);if(e)throw console.error("Error cancelling event registration:",e.message),new Error(`Failed to cancel registration: ${e.message}`);await g.rpc("decrement_attendees",{event_id:r.event_id}).then(({error:n})=>{n&&console.error("Error decrementing attendees:",n.message)})}catch(r){throw console.error("Error in cancelEventRegistration:",r.message),new Error(`Failed to cancel registration: ${r.message}`)}},async deleteEventRegistration(s){try{let{data:r,error:t}=await g.from("event_registrations").select("event_id, payment_evidence").eq("id",s).single();if(t)throw console.error("Error fetching registration for deletion:",t.message),new Error(`Failed to fetch registration: ${t.message}`);if(r.payment_evidence){let{error:n}=await g.storage.from("registrations").remove([r.payment_evidence]);if(n)throw console.error("Error deleting payment evidence:",n.message),new Error(`Failed to delete payment evidence: ${n.message}`)}let{error:e}=await g.from("event_registrations").delete().eq("id",s);if(e)throw console.error("Error deleting event registration:",e.message),new Error(`Failed to delete registration: ${e.message}`);await g.rpc("decrement_attendees",{event_id:r.event_id}).then(({error:n})=>{n&&console.error("Error decrementing attendees:",n.message)})}catch(r){throw console.error("Error in deleteEventRegistration:",r.message),new Error(`Failed to delete registration: ${r.message}`)}},async createNewsletterSubscription(s){try{let{data:r,error:t}=await g.from("newsletter_subscriptions").insert({email:s.email,name:s.name}).select().single();if(t)throw console.error("Error creating newsletter subscription:",t.message),new Error(`Failed to create subscription: ${t.message}`);return{id:r.id,email:r.email,name:r.name,subscribedAt:r.subscribed_at}}catch(r){throw console.error("Error in createNewsletterSubscription:",r.message),new Error(`Failed to create subscription: ${r.message}`)}},async getNewsletterSubscriptionByEmail(s){try{let{data:r,error:t}=await g.from("newsletter_subscriptions").select("*").eq("email",s).single();if(t){console.error("Error fetching newsletter subscription:",t.message);return}return{id:r.id,email:r.email,name:r.name,subscribedAt:r.subscribed_at}}catch(r){console.error("Error in getNewsletterSubscriptionByEmail:",r.message);return}},async getAllNewsletterSubscriptions(){try{let{data:s,error:r}=await g.from("newsletter_subscriptions").select("*");if(r)throw console.error("Error fetching all newsletter subscriptions:",r.message),new Error(`Failed to fetch subscriptions: ${r.message}`);return s.map(t=>({id:t.id,email:t.email,name:t.name,subscribedAt:t.subscribed_at}))}catch(s){throw console.error("Error in getAllNewsletterSubscriptions:",s.message),new Error(`Failed to fetch subscriptions: ${s.message}`)}}};import{sql as B}from"drizzle-orm";import{pgTable as z,text as E,varchar as P,timestamp as x,boolean as J,decimal as me,integer as X}from"drizzle-orm/pg-core";import{createInsertSchema as Q}from"drizzle-zod";import{z as p}from"zod";var Z=z("users",{id:P("id").primaryKey().default(B`gen_random_uuid()`),email:E("email").notNull().unique(),password:E("password").notNull(),firstName:E("first_name").notNull(),lastName:E("last_name").notNull(),phoneNumber:E("phone_number"),role:E("role").notNull().default("admin"),createdAt:x("created_at").defaultNow()}),ee=z("events",{id:P("id").primaryKey().default(B`gen_random_uuid()`),title:E("title").notNull(),description:E("description").notNull(),startDate:x("start_date").notNull(),endDate:x("end_date").notNull(),location:E("location"),price:me("price",{precision:10,scale:2}).notNull(),maxAttendees:X("max_attendees"),currentAttendees:X("current_attendees").default(0),imageUrl:E("image_url"),tags:E("tags").array(),featured:J("featured").default(!1),createdAt:x("created_at").defaultNow()}),Ne=z("event_registrations",{id:P("id").primaryKey().default(B`gen_random_uuid()`),registrationNumber:E("registration_number").notNull().unique(),userId:P("user_id").notNull().references(()=>Z.id),eventId:P("event_id").notNull().references(()=>ee.id),paymentStatus:E("payment_status").notNull().default("pending"),registeredAt:x("registered_at").defaultNow(),title:E("title"),gender:E("gender"),country:E("country"),organization:E("organization"),organizationType:E("organization_type"),position:E("position"),notes:E("notes"),hasPaid:J("has_paid").default(!1),paymentEvidence:E("payment_evidence")}),Ie=z("newsletter_subscriptions",{id:P("id").primaryKey().default(B`gen_random_uuid()`),email:E("email").notNull().unique(),name:E("name"),subscribedAt:x("subscribed_at").defaultNow()}),te=Q(Z).omit({id:!0,createdAt:!0}),Pe=Q(ee).omit({id:!0,createdAt:!0,currentAttendees:!0}),re=p.object({eventId:p.string(),userId:p.string(),title:p.string(),gender:p.string(),country:p.string(),organization:p.string(),organizationType:p.string(),position:p.string(),notes:p.string().optional().nullable(),hasPaid:p.boolean().optional().default(!1),paymentStatus:p.enum(["pending","paid","cancelled"]).optional().default("pending"),paymentMethod:p.string().optional().nullable(),currency:p.string().optional().nullable(),pricePaid:p.number().optional().nullable(),paymentEvidence:p.string().optional().nullable()}),se=p.object({email:p.string().email(),name:p.string().optional().nullable()}),xe=p.object({id:p.string().uuid(),registrationId:p.string().uuid(),filePath:p.string(),uploadedAt:p.string().datetime()}),$e=p.object({registrationId:p.string().uuid(),filePath:p.string()});import{createClient as R}from"@supabase/supabase-js";import pe from"express-fileupload";var h={SuperAdmin:"super_admin",Finance:"finance_person",EventManager:"event_manager",Ordinary:"ordinary_user"},fe=(s,r)=>!!s&&r.includes(s),v=async(s,r,t)=>{try{let e=s.headers.authorization,n=e?.startsWith("Bearer ")?e.slice(7):void 0;if(!n)return r.status(401).json({message:"Access token required"});let a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)return r.status(500).json({message:"Supabase server credentials not configured"});let i=R(a,o),{data:c,error:d}=await i.auth.getUser(n);if(d||!c.user)return r.status(403).json({message:"Invalid or expired token"});s.supabaseUser=c.user,s.supabaseRole=c.user.user_metadata?.role||h.Ordinary,t()}catch{return r.status(403).json({message:"Invalid or expired token"})}},S=s=>(r,t,e)=>{let n=r.supabaseRole;if(!fe(n,s))return t.status(403).json({message:"Insufficient permissions"});e()};async function ne(s){return s.use(pe({limits:{fileSize:10*1024*1024},abortOnLimit:!0,useTempFiles:!0,tempFileDir:"/tmp/",debug:!1})),s.post("/api/auth/register",async(t,e)=>{try{let n=te.parse(t.body);if(await u.getUserByEmail(n.email))return e.status(400).json({message:"User already exists"});let i=(await u.getAllUsers()).length===0,c=await u.createUser({...n,role:i?"super_admin":n.role||"ordinary_user"});e.status(201).json({user:c})}catch(n){console.error("Registration error:",n),e.status(400).json({message:"Invalid user data"})}}),s.post("/api/admin/users/register",v,S([h.SuperAdmin]),async(t,e)=>{try{let{firstName:n,lastName:a,email:o,phoneNumber:i,password:c,role:d}=t.body;if(!n||!a||!o||!c||!d)return e.status(400).json({message:"Missing required fields"});if(await u.getUserByEmail(o))return e.status(400).json({message:"User already exists"});let l=process.env.SUPABASE_URL,_=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!l||!_)return e.status(500).json({message:"Server configuration error"});let f=R(l,_),{data:w,error:b}=await f.auth.admin.createUser({email:o,password:c,email_confirm:!0,user_metadata:{first_name:n,last_name:a,phone_number:i,role:d}});if(b)return console.error("Supabase auth error:",b),e.status(500).json({message:"Failed to create user account"});if(!w.user)return e.status(500).json({message:"Failed to create user"});let y=await u.createUser({firstName:n,lastName:a,email:o,password:c,phoneNumber:i||null,role:d});console.log(`\u2705 Admin created user: ${o} with role: ${d}`),e.status(201).json({message:"User created successfully",user:{id:y.id,firstName:y.firstName,lastName:y.lastName,email:y.email,phoneNumber:y.phoneNumber,role:y.role,createdAt:y.createdAt}})}catch(n){console.error("Admin user registration error:",n),e.status(500).json({message:"Failed to create user",details:n.message})}}),s.post("/api/auth/login",async(t,e)=>{try{let{email:n,password:a}=t.body;if(!n||!a)return e.status(400).json({message:"Email and password required"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return e.status(500).json({message:"Supabase server credentials not configured"});let c=R(o,i),{data:d,error:m}=await c.auth.signInWithPassword({email:n,password:a});if(m||!d.user)return e.status(401).json({message:"Invalid credentials"});let l=await u.getUser(d.user.id);if(!l)return e.status(404).json({message:"User not found"});e.json({user:l,token:d.session.access_token})}catch(n){console.error("Login error:",n),e.status(500).json({message:"Login failed"})}}),s.get("/api/events",async(t,e)=>{try{let n=await u.getAllEvents();e.json(n)}catch(n){console.error("Error fetching events:",n),e.status(500).json({message:"Failed to fetch events"})}}),s.post("/api/events/register",v,async(t,e)=>{try{let n=re.parse(t.body);if(n.userId!==t.supabaseUser.id)return e.status(403).json({message:"Can only register for yourself"});if((await u.getEventRegistrationsByUser(n.userId)).some(d=>d.eventId===n.eventId&&d.paymentStatus!=="cancelled"))return e.status(400).json({message:"Already registered for this event"});let i=await u.getEvent(n.eventId);if(!i)return e.status(404).json({message:"Event not found"});if(i.maxAttendees&&i.currentAttendees&&i.currentAttendees>=i.maxAttendees)return e.status(400).json({message:"Event is full"});let c=await u.createEventRegistration({...n,paymentStatus:"pending",hasPaid:!1});e.status(201).json(c)}catch(n){console.error("Registration error:",n),e.status(400).json({message:"Registration failed"})}}),s.post("/api/admin/events/register",v,S([h.EventManager,h.SuperAdmin]),async(t,e)=>{try{let{userId:n,eventId:a,title:o,gender:i,country:c,organization:d,organizationType:m,position:l,notes:_,hasPaid:f,paymentStatus:w}=t.body;if(!n||!a||!o||!i||!c||!d||!l)return e.status(400).json({message:"Missing required fields"});if(!await u.getUser(n))return e.status(404).json({message:"User not found"});let y=await u.getEvent(a);if(!y)return e.status(404).json({message:"Event not found"});if((await u.getEventRegistrationsByUser(n)).some(F=>F.eventId===a&&F.paymentStatus!=="cancelled"))return e.status(400).json({message:"User is already registered for this event"});if(y.maxAttendees&&y.currentAttendees&&y.currentAttendees>=y.maxAttendees)return e.status(400).json({message:"Event is full"});let N=await u.createEventRegistration({eventId:a,userId:n,title:o,gender:i,country:c,organization:d,organizationType:m||"Other",position:l,notes:_||null,hasPaid:f||!1,paymentStatus:w||"pending",paymentEvidence:null});console.log(`\u2705 Admin registered user ${n} for event ${a}`),e.status(201).json({message:"Registration created successfully",registration:{id:N.id,eventId:N.eventId,userId:N.userId,paymentStatus:N.paymentStatus,registeredAt:N.registeredAt}})}catch(n){console.error("Admin event registration error:",n),e.status(500).json({message:"Failed to create registration",details:n.message})}}),s.post("/api/notifications/registration-confirmation",async(t,e)=>{try{let{email:n,eventId:a,fullName:o}=t.body;if(!n||!a||!o)return e.status(400).json({message:"Email, eventId, and fullName required"});let i=await u.getEvent(a);if(!i)return e.status(404).json({message:"Event not found"});console.log(`\u{1F4E7} Sending confirmation email to: ${n}`),console.log(`   Event ID: ${a}`),console.log(`   Event Title: ${i.title}`),console.log(`   Full Name: ${o}`),e.json({success:!0,message:"Email queued for sending"})}catch(n){console.error("Email error:",n),e.status(500).json({message:"Failed to send confirmation"})}}),s.get("/api/users/:userId/registrations",v,async(t,e)=>{try{let{userId:n}=t.params;if(t.supabaseRole!=="super_admin"&&t.supabaseRole!=="finance_person"&&t.supabaseUser.id!==n)return e.status(403).json({message:"Access denied"});let a=await u.getEventRegistrationsByUser(n),o=await Promise.all(a.map(async i=>{let c=await u.getEvent(i.eventId);return{...i,event:c}}));e.json(o)}catch(n){console.error("Error fetching registrations:",n),e.status(500).json({message:"Failed to fetch registrations"})}}),s.patch("/api/users/:userId/registrations/:registrationId/cancel",v,async(t,e)=>{try{let{userId:n,registrationId:a}=t.params;if(t.supabaseRole!=="super_admin"&&t.supabaseRole!=="finance_person"&&t.supabaseUser.id!==n)return e.status(403).json({message:"Access denied"});let o=await u.getEventRegistration(a);if(!o)return e.status(404).json({message:"Registration not found"});if(t.supabaseRole!=="super_admin"&&t.supabaseRole!=="finance_person"&&o.userId!==n)return e.status(403).json({message:"Access denied"});if(o.paymentStatus==="cancelled")return e.status(400).json({message:"Registration is already cancelled"});await u.cancelEventRegistration(a),e.json({message:"Registration cancelled successfully"})}catch(n){console.error("Error cancelling registration:",n),e.status(500).json({message:"Failed to cancel registration"})}}),s.delete("/api/users/:userId/registrations/:registrationId",v,S(["super_admin"]),async(t,e)=>{try{let{userId:n,registrationId:a}=t.params;if(!await u.getEventRegistration(a))return e.status(404).json({message:"Registration not found"});await u.deleteEventRegistration(a),e.json({message:"Registration deleted successfully"})}catch(n){console.error("Error deleting registration:",n),e.status(500).json({message:"Failed to delete registration"})}}),s.post("/api/newsletter/subscribe",async(t,e)=>{try{let n=se.parse(t.body),a=await u.getNewsletterSubscriptionByEmail(n.email);if(a)return e.status(200).json({message:"Already subscribed",subscription:a});let o=await u.createNewsletterSubscription(n);e.status(201).json(o)}catch(n){console.error("Subscription error:",n),e.status(400).json({message:"Subscription failed"})}}),s.get("/api/admin/events",v,S([h.SuperAdmin,h.Finance,h.EventManager]),async(t,e)=>{try{let n=await u.getAllEvents();e.json(n)}catch(n){console.error("Error fetching admin events:",n),e.status(500).json({message:"Failed to fetch events"})}}),s.get("/api/admin/users",v,S([h.SuperAdmin]),async(t,e)=>{try{let n=process.env.SUPABASE_URL,a=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!n||!a)return e.status(500).json({message:"Supabase server credentials not configured"});let o=R(n,a),i=[],c=1e3,d=1;for(;;){let{data:l,error:_}=await o.auth.admin.listUsers({page:d,perPage:c});if(_)throw _;let f=l.users||[];if(f.length===0||(i.push(...f),f.length<c))break;d+=1}let m=await Promise.all(i.map(async l=>await u.getUser(l.id)||{id:l.id,email:l.email||"",firstName:l.user_metadata?.first_name||"",lastName:l.user_metadata?.last_name||"",phoneNumber:l.user_metadata?.phone_number||"",role:l.user_metadata?.role||"ordinary_user",createdAt:l.created_at}));e.json(m)}catch(n){console.error("Error fetching admin users:",n),e.status(500).json({message:"Failed to fetch users"})}}),s.get("/api/admin/registrations",v,S([h.SuperAdmin,h.Finance,h.EventManager]),async(t,e)=>{try{let n=await u.getAllEventRegistrations(),a=process.env.SUPABASE_URL,o=process.env.SUPABASE_SERVICE_ROLE_KEY,i=a&&o?R(a,o):null,c=await Promise.all(n.map(async d=>{let m=await u.getEvent(d.eventId),l;if(i)try{let{data:_}=await i.auth.admin.getUserById(d.userId),f=_?.user;f&&(l={id:f.id,email:f.email,firstName:f.user_metadata?.first_name||"",lastName:f.user_metadata?.last_name||""})}catch{}return{...d,event:m,user:l}}));e.json(c)}catch(n){console.error("Error fetching admin registrations:",n),e.status(500).json({message:"Failed to fetch registrations"})}}),s.patch("/api/admin/registrations/:registrationId",v,S([h.SuperAdmin,h.Finance]),async(t,e)=>{try{let{registrationId:n}=t.params,{paymentStatus:a,hasPaid:o}=t.body;if(!a&&o===void 0)return e.status(400).json({message:"No updates provided"});let i=await u.updateEventRegistration(n,{paymentStatus:a,hasPaid:o});if(!i)return e.status(404).json({message:"Registration not found"});e.json(i)}catch(n){console.error("Error updating registration:",n),e.status(500).json({message:"Failed to update registration"})}}),s.patch("/api/admin/users/:userId/role",v,S([h.SuperAdmin]),async(t,e)=>{try{let{userId:n}=t.params,{role:a}=t.body;if(!a||!["super_admin","finance_person","event_manager","ordinary_user"].includes(a))return e.status(400).json({message:"Invalid role"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return e.status(500).json({message:"Supabase server credentials not configured"});let c=R(o,i),{error:d}=await c.auth.admin.updateUserById(n,{user_metadata:{role:a}});if(d)throw d;e.json({success:!0})}catch(n){console.error("Error updating user role:",n),e.status(500).json({message:"Failed to update user role"})}}),s.get("/api/admin/newsletter-subscriptions",v,S([h.SuperAdmin]),async(t,e)=>{try{let n=await u.getAllNewsletterSubscriptions();e.json(n)}catch(n){console.error("Error fetching newsletter subscriptions:",n),e.status(500).json({message:"Failed to fetch subscriptions"})}}),s.post("/api/admin/email-blast",v,S([h.SuperAdmin]),async(t,e)=>{try{let{subject:n,message:a,fromName:o="Alliance Procurement",fromEmail:i="no-reply@apcb.com"}=t.body;if(!n||!a)return e.status(400).json({message:"Subject and message are required"});let c=await u.getAllNewsletterSubscriptions();console.log(`\u{1F4E7} Sending email blast to ${c.length} subscribers`),console.log(`   Subject: ${n}`),console.log(`   From: ${o} <${i}>`),e.json({message:`Email blast queued for ${c.length} subscribers`,results:{sent:c.length,failed:0,total:c.length}})}catch(n){console.error("Error sending email blast:",n),e.status(500).json({message:"Failed to send email blast"})}}),s.get("/evidence/:userId/:eventId/:fileName",v,async(t,e)=>{try{let{userId:n,eventId:a,fileName:o}=t.params,i=`evidence/${n||""}/${a||""}/${o||""}`;if(!(t.supabaseUser.id===n||t.supabaseRole==="super_admin"||t.supabaseRole==="finance_person"))return e.status(403).json({message:"Access denied"});let d=process.env.SUPABASE_URL,m=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!d||!m)return e.status(500).json({message:"Supabase server credentials not configured"});let l=R(d,m),_=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations",{data:f,error:w}=await l.storage.from(_).download(i);if(w)return console.error("File download error:",w),e.status(404).json({message:"File not found"});if(!f)return e.status(404).json({message:"File not found"});let b=Buffer.from(await f.arrayBuffer()),y=o.toLowerCase().split(".").pop(),A="application/octet-stream";switch(y){case"pdf":A="application/pdf";break;case"jpg":case"jpeg":A="image/jpeg";break;case"png":A="image/png";break;case"doc":A="application/msword";break;case"docx":A="application/vnd.openxmlformats-officedocument.wordprocessingml.document";break}e.set({"Content-Type":A,"Content-Disposition":`inline; filename="${o}"`,"Cache-Control":"public, max-age=31536000"}),e.send(b)}catch(n){console.error("Error serving evidence file:",n),e.status(500).json({message:"Failed to serve file"})}}),s.get("/api/admin/payment-evidence/:evidencePath",v,S([h.SuperAdmin,h.Finance]),async(t,e)=>{try{let{evidencePath:n}=t.params,a=decodeURIComponent(n);if(console.log(`\u{1F50D} Fetching evidence from path: ${a}`),!a)return console.log("\u274C No evidence path provided"),e.status(400).json({message:"Evidence path is required"});let o=process.env.SUPABASE_URL,i=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!o||!i)return console.error("\u274C Missing Supabase credentials"),e.status(500).json({message:"Server configuration error"});let c=R(o,i),d=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations";console.log(`\u{1FAA3} Using bucket: ${d}`),console.log(`\u{1F4C2} File path: ${a}`);let{data:m,error:l}=await c.storage.from(d).download(a||"");if(l){console.error("\u274C Storage download error:",l);let y=[a.replace("/storage/v1/object/",""),a.split("/").slice(-3).join("/"),`evidence/${a.split("/").slice(-3).join("/")}`];console.log("\u{1F504} Trying alternative paths:",y);for(let A of y)try{console.log(`\u{1F504} Attempting: ${A}`);let{data:$,error:N}=await c.storage.from(d).download(A);if(!N&&$){console.log(`\u2705 Success with alternative path: ${A}`);let F=Buffer.from(await $.arrayBuffer()),H=A.split("/").pop()||"evidence",k=H.toLowerCase().split(".").pop()||"",C="application/octet-stream";return k==="pdf"?C="application/pdf":["jpg","jpeg"].includes(k||"")?C="image/jpeg":k==="png"&&(C="image/png"),e.set({"Content-Type":C,"Content-Disposition":`inline; filename="${H}"`,"Cache-Control":"private, max-age=3600"}),e.send(F)}}catch($){console.log(`\u274C Alternative path failed: ${A}`,$)}return e.status(404).json({message:"Evidence file not found in storage",details:l.message,attemptedPaths:y})}if(!m)return console.log("\u274C No data returned from storage"),e.status(404).json({message:"Evidence file not found"});console.log("\u2705 File downloaded successfully");let _=Buffer.from(await m.arrayBuffer()),f=a.split("/").pop()||"evidence",w=f.toLowerCase().split(".").pop()||"",b="application/octet-stream";w==="pdf"?b="application/pdf":["jpg","jpeg"].includes(w||"")?b="image/jpeg":w==="png"&&(b="image/png"),e.set({"Content-Type":b,"Content-Disposition":`inline; filename="${f}"`,"Cache-Control":"private, max-age=3600"}),e.send(_)}catch(n){console.error("\u274C Evidence error:",n),e.status(500).json({message:"Server error while fetching evidence",details:n.message})}}),s.get("/api/users/payment-evidence/:evidencePath",v,async(t,e)=>{try{let{evidencePath:n}=t.params,a=decodeURIComponent(n),o=t.supabaseUser.id;if(console.log(`\u{1F50D} User ${o} fetching evidence from path: ${a}`),!a)return console.log("\u274C No evidence path provided"),e.status(400).json({message:"Evidence path is required"});if(!a.includes(o))return console.log(`\u274C User ${o} trying to access evidence not owned by them`),e.status(403).json({message:"Access denied to this evidence"});let i=process.env.SUPABASE_URL,c=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!i||!c)return console.error("\u274C Missing Supabase credentials"),e.status(500).json({message:"Server configuration error"});let d=R(i,c),m=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations";console.log(`\u{1FAA3} Using bucket: ${m}`),console.log(`\u{1F4C2} File path: ${a}`);let{data:l,error:_}=await d.storage.from(m).download(a||"");if(_)return console.error("\u274C Storage download error:",_),e.status(404).json({message:"Evidence file not found in storage",details:_.message});if(!l)return console.log("\u274C No data returned from storage"),e.status(404).json({message:"Evidence file not found"});console.log(`\u2705 File downloaded successfully for user ${o}`);let f=Buffer.from(await l.arrayBuffer()),w=a.split("/").pop()||"evidence",b=w.toLowerCase().split(".").pop()||"",y="application/octet-stream";b==="pdf"?y="application/pdf":["jpg","jpeg"].includes(b||"")?y="image/jpeg":b==="png"&&(y="image/png"),e.set({"Content-Type":y,"Content-Disposition":`inline; filename="${w}"`,"Cache-Control":"private, max-age=3600"}),e.send(f)}catch(n){console.error("\u274C User evidence error:",n),e.status(500).json({message:"Server error while fetching evidence",details:n.message})}}),s.put("/api/users/payment-evidence/:registrationId",v,async(t,e)=>e.status(403).json({message:"Evidence updates are restricted to finance"})),s.put("/api/admin/payment-evidence/:registrationId",v,async(t,e)=>{try{let{registrationId:n}=t.params,{evidenceFile:a}=t.body;if(!a)return e.status(400).json({message:"Evidence file is required"});console.log(`\u{1F504} Updating evidence for registration: ${n}`);let o=await u.getEventRegistration(n);if(!o)return e.status(404).json({message:"Registration not found"});if(o.paymentStatus==="cancelled")return e.status(400).json({message:"Cannot update evidence for cancelled registration"});let i=process.env.SUPABASE_URL,c=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!i||!c)return e.status(500).json({message:"Server configuration error"});let d=R(i,c),m=process.env.VITE_SUPABASE_EVIDENCE_BUCKET||"registrations",l=a.name.split(".").pop(),_=`evidence_${Date.now()}.${l}`,f=`evidence/${o.userId}/${o.eventId}/${_}`,{error:w}=await d.storage.from(m).upload(f,a,{cacheControl:"3600",upsert:!1,contentType:a.type||"application/octet-stream"});if(w)return console.error("\u274C Upload error:",w),e.status(500).json({message:"Failed to upload new evidence file"});if(o.paymentEvidence)try{await d.storage.from(m).remove([o.paymentEvidence]),console.log(`\u{1F5D1}\uFE0F Deleted old evidence: ${o.paymentEvidence}`)}catch(y){console.warn("\u26A0\uFE0F Failed to delete old evidence:",y)}let b=await u.updateEventRegistration(n,{paymentEvidence:f});if(!b)return e.status(500).json({message:"Failed to update registration"});console.log(`\u2705 Evidence updated successfully: ${f}`),e.json({message:"Evidence updated successfully",registration:b,newEvidencePath:f})}catch(n){console.error("\u274C Evidence update error:",n),e.status(500).json({message:"Server error while updating evidence",details:n.message})}}),s.post("/api/admin/events",v,S([h.SuperAdmin,h.EventManager]),async(t,e)=>{try{let n=await u.createEvent(t.body);e.status(201).json(n)}catch(n){e.status(400).json({message:"Failed to create event",details:n.message})}}),s.patch("/api/admin/events/:eventId",v,S([h.SuperAdmin,h.EventManager]),async(t,e)=>{try{let n=await u.updateEvent(t.params.eventId,t.body);if(!n)return e.status(404).json({message:"Event not found"});e.json(n)}catch(n){e.status(400).json({message:"Failed to update event",details:n.message})}}),s.delete("/api/admin/events/:eventId",v,S([h.SuperAdmin,h.EventManager]),async(t,e)=>{try{if(!await u.deleteEvent(t.params.eventId))return e.status(404).json({message:"Event not found"});e.json({success:!0})}catch(n){e.status(400).json({message:"Failed to delete event",details:n.message})}}),ge(s)}import{createClient as ye}from"@supabase/supabase-js";var ae=process.env.SUPABASE_URL,oe=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!ae||!oe)throw new Error("Supabase URL and service role key must be provided");var ie=ye(ae,oe,{auth:{persistSession:!1},db:{schema:"public"},global:{headers:{Connection:"keep-alive","Keep-Alive":"timeout=5, max=1000"}},realtime:{params:{eventsPerSecond:2}}}),D=null;var T=async()=>(D||(D=ie),D),U=new Map,he=5*60*1e3,O=s=>{let r=U.get(s);return r&&Date.now()-r.timestamp<r.ttl?r.data:(U.delete(s),null)},V=(s,r,t=he)=>{if(U.size>=100){let e=U.keys().next().value;U.delete(e)}U.set(s,{data:r,timestamp:Date.now(),ttl:t})};setInterval(()=>{let s=Date.now();for(let[r,t]of U.entries())s-t.timestamp>t.ttl&&U.delete(r)},6e4);var I={async generateRegistrationNumber(){try{let s="registration_count",r=O(s);if(r===null){let{count:e,error:n}=await ie.from("event_registrations").select("*",{count:"exact",head:!0});if(n)throw console.error("Error getting registration count:",n),n;r=e||0,V(s,r,3e4)}return(r+1).toString().padStart(4,"0")}catch(s){throw console.error("Error generating registration number:",s),s}},async createUser(s){try{let r=await T(),{data:t,error:e}=await r.auth.admin.createUser({email:s.email,password:s.password,email_confirm:!0,user_metadata:{role:s.role||"ordinary_user",first_name:s.firstName,last_name:s.lastName}});if(e)throw console.error("Supabase Auth error:",e),e;if(!t.user)throw new Error("Failed to create user in Supabase Auth");let{data:n,error:a}=await r.from("users").insert({id:t.user.id,first_name:s.firstName,last_name:s.lastName,phone_number:s.phoneNumber||null,created_at:new Date().toISOString()}).select().single();if(a)throw console.error("Database insert error:",a),await r.auth.admin.deleteUser(t.user.id),a;return U.delete("all_users"),{id:t.user.id,email:t.user.email,firstName:s.firstName,lastName:s.lastName,phoneNumber:s.phoneNumber||null,role:t.user.user_metadata?.role||"ordinary_user",createdAt:n.created_at}}catch(r){throw console.error("Error creating user:",r),r}},async getUserByEmail(s){try{let r=`user_${s}`,t=O(r);if(t)return t;let e=await T(),{data:n,error:a}=await e.auth.admin.listUsers({page:1,perPage:1e3});if(a)throw console.error("Error fetching users from Supabase Auth:",a),a;let o=n.users.find(m=>m.email===s);if(!o)return null;let{data:i,error:c}=await e.from("users").select("first_name, last_name, phone_number, created_at").eq("id",o.id).single();if(c&&c.code!=="PGRST116")throw console.error("Database query error:",c),c;let d={id:o.id,email:o.email,firstName:i?.first_name||o.user_metadata?.first_name||"",lastName:i?.last_name||o.user_metadata?.last_name||"",phoneNumber:i?.phone_number||null,role:o.user_metadata?.role||"ordinary_user",createdAt:i?.created_at||o.created_at};return V(r,d),d}catch(r){throw console.error("Error getting user by email:",r),r}},async getAllUsers(){try{let s="all_users",r=O(s);if(r)return r;let t=await T(),{data:e,error:n}=await t.auth.admin.listUsers({page:1,perPage:100});if(n)throw console.error("Error fetching users from Supabase Auth:",n),n;let a=e.users.map(m=>m.id),{data:o,error:i}=await t.from("users").select("id, first_name, last_name, phone_number, created_at").in("id",a);if(i)throw console.error("Database query error:",i),i;let c=new Map(o?.map(m=>[m.id,m])||[]),d=e.users.map(m=>{let l=c.get(m.id);return{id:m.id,email:m.email,firstName:l?.first_name||m.user_metadata?.first_name||"",lastName:l?.last_name||m.user_metadata?.last_name||"",phoneNumber:l?.phone_number||null,role:m.user_metadata?.role||"ordinary_user",createdAt:l?.created_at||m.created_at}});return V(s,d,6e4),d}catch(s){throw console.error("Error getting all users:",s),s}},async updateUserRole(s,r){try{let t=await T(),{error:e}=await t.auth.admin.updateUserById(s,{user_metadata:{role:r}});if(e)throw console.error("Error updating user role:",e),e;U.delete("all_users");for(let[n]of U.entries())n.startsWith("user_")&&U.delete(n)}catch(t){throw console.error("Error updating user role:",t),t}},cleanup(){U.clear(),D=null}};process.on("exit",()=>{I.cleanup()});var ve=Ee(import.meta.url),_e=q.dirname(ve);process.env.NODE_OPTIONS="--max-old-space-size=512 --optimize-for-size";var j=K();j.use(K.json({limit:"5mb"}));j.use(K.urlencoded({extended:!1,limit:"5mb"}));j.use((s,r,t)=>{s.path.startsWith("/api")&&console.log(`${s.method} ${s.path}`),t()});var ce=()=>{let s=process.memoryUsage();console.log(`Memory: ${Math.round(s.heapUsed/1024/1024)}MB heap, ${Math.round(s.rss/1024/1024)}MB RSS`)};j.get("/api/health",(s,r)=>{let t=process.memoryUsage();r.json({status:"ok",memory:{heap:Math.round(t.heapUsed/1024/1024)+"MB",rss:Math.round(t.rss/1024/1024)+"MB",external:Math.round(t.external/1024/1024)+"MB"},uptime:Math.round(process.uptime())+"s"})});var Y=q.join(_e,"../public");j.use(K.static(Y,{maxAge:"7d",etag:!1,lastModified:!1,setHeaders:s=>{s.setHeader("Cache-Control","public, max-age=604800")}}));try{let s=await ne(j);console.log("\u2705 API routes registered successfully")}catch(s){console.error("\u274C Failed to register routes:",s.message),I.cleanup(),process.exit(1)}j.get("*",(s,r)=>{if(s.path.startsWith("/api"))return r.status(404).json({message:"API route not found"});let t=q.join(Y,"index.html");if(!le("fs").existsSync(t))return console.error(`Client build not found at ${t}`),r.status(503).json({message:"Client application not built yet",hint:"Run 'npm run build:client' first",path:t});r.sendFile(t,{maxAge:36e5,headers:{"Cache-Control":"public, max-age=3600"}},e=>{e&&(console.error("Error serving index.html:",e.message),r.status(500).json({message:"Server error"}))})});j.use((s,r,t,e)=>{console.error(`Error: ${s.message}`),t.status(s.status||500).json({message:process.env.NODE_ENV==="production"?"Internal Server Error":s.message})});var de=process.env.PORT||5005,L=j.listen(de,"0.0.0.0",()=>{console.log(`\u{1F680} Server running on port ${de}`),console.log(`\u{1F4C1} Serving static files from: ${Y}`),ce(),setInterval(ce,3e5)});L.timeout=3e4;L.keepAliveTimeout=65e3;L.headersTimeout=66e3;var M=s=>{console.log(`${s} received, shutting down gracefully`),I.cleanup(),L.close(()=>{console.log("Process terminated"),process.exit(0)}),setTimeout(()=>{console.log("Forcing exit..."),I.cleanup(),process.exit(1)},1e4)};process.on("SIGTERM",()=>M("SIGTERM"));process.on("SIGINT",()=>M("SIGINT"));process.on("uncaughtException",s=>{console.error("Uncaught Exception:",s),I.cleanup(),M("UNCAUGHT_EXCEPTION")});process.on("unhandledRejection",(s,r)=>{console.error("Unhandled Rejection at:",r,"reason:",s),I.cleanup(),M("UNHANDLED_REJECTION")});var We=j;export{We as default};
