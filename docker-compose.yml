version: '3.8'

services:
  # Main Application Service
  alliance-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: alliance-procurement-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.production
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - app_node_modules:/app/node_modules
    depends_on:
      - redis
    networks:
      - alliance-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alliance-app.rule=Host(`yourdomain.com`)"
      - "traefik.http.routers.alliance-app.tls=true"
      - "traefik.http.routers.alliance-app.tls.certresolver=letsencrypt"

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: alliance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - alliance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: alliance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./uploads:/var/www/uploads:ro
      - ./logs/nginx:/var/log/nginx
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    depends_on:
      - alliance-app
    networks:
      - alliance-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: alliance-certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@yourdomain.com --agree-tos --no-eff-email -d yourdomain.com -d www.yourdomain.com
    profiles:
      - ssl-setup
    networks:
      - alliance-network

  # Development service (alternative to production app)
  alliance-app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: alliance-procurement-dev
    ports:
      - "3000:3000"
      - "5173:5173"  # Vite dev server
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
    env_file:
      - .env.local
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      - redis
    networks:
      - alliance-network
    profiles:
      - development
    command: npm run dev

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: alliance-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    networks:
      - alliance-network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: alliance-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    profiles:
      - monitoring
    networks:
      - alliance-network

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: alliance-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/data
    command: -config.file=/etc/loki/local-config.yaml
    profiles:
      - monitoring
    networks:
      - alliance-network

  # Database backup service (for Supabase backup if needed)
  db-backup:
    image: postgres:15-alpine
    container_name: alliance-db-backup
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "while true; do sleep 86400; /backup.sh; done"
    profiles:
      - backup
    networks:
      - alliance-network

volumes:
  # Application data
  app_node_modules:
    driver: local

  # Redis data
  redis_data:
    driver: local

  # SSL certificates
  certbot_www:
    driver: local
  certbot_conf:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  alliance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Override configurations for different environments
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Apply logging to all services
services:
  alliance-app:
    logging: *default-logging
  redis:
    logging: *default-logging
  nginx:
    logging: *default-logging
